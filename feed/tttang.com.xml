<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-11-08T06:19:42+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">2022 USTC Hackergame WriteUp 0x03</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1805/"/>
    <id>https://tttang.com/archive/1805/</id>
    <published>2022-11-07T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是 喵喵 2022 Hackergame WriteUp 的&lt;strong&gt;第三篇&lt;/strong&gt;，主要也是一些难度稍大的题目，以及喵喵的碎碎念。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022 USTC Hackergame WriteUp 0x02</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1804/"/>
    <id>https://tttang.com/archive/1804/</id>
    <published>2022-11-07T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是 喵喵 2022 Hackergame WriteUp 的&lt;strong&gt;第二篇&lt;/strong&gt;，主要包括一些难度稍大的题目，以 binary 类型为主。&lt;/p&gt;
&lt;p&gt;希望师傅们看了都能有所收获喵~&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022 USTC Hackergame WriteUp 0x01</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1803/"/>
    <id>https://tttang.com/archive/1803/</id>
    <published>2022-11-07T12:00:00+08:00</published>
    <summary type="text">
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;中国科学技术大学第九届信息安全大赛&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">如何基于volatility2构建“新”版本内核的profile</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1801/"/>
    <id>https://tttang.com/archive/1801/</id>
    <published>2022-11-04T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;前两天跳跳糖发表了一篇如何基于vol3构建symbols_table的文章 &lt;br&gt;
&lt;a href=&quot;https://tttang.com/archive/1762/&quot; target=&quot;_blank&quot;&gt;Linux新版内核下内存取证分析附CTF题&lt;/a&gt;&lt;br&gt;
vol3之于vol2，很大的改变就是用symbol_tables(符号表)替换了profile(配置文件)，vol3带有一个广泛的符号表库，并且可以基于内存映像本身为大多数 Windows 内存映像生成新的&lt;a href=&quot;https://volatility3.readthedocs.io/en/latest/volatility3.framework.interfaces.symbols.html#volatility3.framework.interfaces.symbols.SymbolTableInterface&quot; target=&quot;_blank&quot;&gt;符号表&lt;/a&gt;。&lt;br&gt;
最近的2022祥云杯正好出了一道需要自己构建新版本内核的题（这里“新&quot;指的是profile在互联网上找不到对应的profile），关于构建profile中文社区没发现什么文章。这里记录一下，直接用祥云杯的附件做例子了。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Weblogic Analysis Attacked by T3 Protocol From CVE (part 3)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1800/"/>
    <id>https://tttang.com/archive/1800/</id>
    <published>2022-11-03T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;继续抽空学习Weblogic CVE中有关T3协议的漏洞利用方式！&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">fuzzer AFL 源码分析（五）-变异</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1796/"/>
    <id>https://tttang.com/archive/1796/</id>
    <published>2022-11-02T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;前面几篇文章将&lt;code&gt;afl&lt;/code&gt;的大部分内容都已经覆盖到了（编译、反馈到监控），最后一个部分主要讲&lt;code&gt;afl&lt;/code&gt;是如何挑选样本并针对样本的数据进行变异的。通过之前的分析我们已经知道，编译的种子通过链表的形式形成种子队列，种子经过变异后如果能够触发目标程序新的行为，会作为新的种子队列存入到链表中。但是对于新一轮的模糊测试，挑选哪个种子进行变异以及如何变异尚未解决，本文主要阐述&lt;code&gt;afl&lt;/code&gt;是如何挑选种子进行变异以及如何变异。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Play With Windows Defender -- ASR篇</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1798/"/>
    <id>https://tttang.com/archive/1798/</id>
    <published>2022-11-01T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;终端对抗一直是红队研究的重点内容，本文主要通过前面已有的研究来解开Windows Defender的ASR规则的神秘面纱，由于国内可供参考资料很有限，多以国外会议和议题参考为主&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022蓝帽杯遇见的 SUID 提权 总结篇</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1793/"/>
    <id>https://tttang.com/archive/1793/</id>
    <published>2022-10-31T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;code&gt;SUID&lt;/code&gt;提权是前阵子在蓝帽杯中刚接触到的一个点，本来以为是挺鸡肋的一个点，但是前两天接触了一台真实使用的服务器（类似于上机排查取证）。发现竟然有很多可以利用的点，印象深刻的就是当时机子里有个&lt;code&gt;vim-basic&lt;/code&gt;，甚至好像还有个&lt;code&gt;find&lt;/code&gt;留着。这些都可能利用&lt;code&gt;suid&lt;/code&gt;的特殊权限实现突破。于是重新学习一下。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Zoho Password Manager Pro 后利用技巧</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1791/"/>
    <id>https://tttang.com/archive/1791/</id>
    <published>2022-10-28T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;学习zoho pmp这块相关知识点，简单做个总结&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">PHP-FPM攻击详解</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1775/"/>
    <id>https://tttang.com/archive/1775/</id>
    <published>2022-10-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;最近参加了浙江省信息安全竞赛，遇到了一道攻击fastcgi的题目，发现自己对php-fpm不够了解，于是做了一个归纳总结。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text"># CobaltStrike beacon二开指南</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1789/"/>
    <id>https://tttang.com/archive/1789/</id>
    <published>2022-10-26T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;CobaltStrike真好用啊，但是缺点就是太好用了被各类安全厂商严防死守，研究了半天shellcode loader和白加黑之类的免杀，多多少少都有翻车的记录，有没有更好的办法呢？&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Cobalt Strike BOF原理分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1786/"/>
    <id>https://tttang.com/archive/1786/</id>
    <published>2022-10-25T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;BOF(Beacon 对象文件)是C/C++编译，但未链接产生的Obj文件，BOF运行在Beacon进程中，并执行内部的Beacon API和Win32 API函数。BOF本质是COFF Obj文件，其符合COFF文件格式规范，结构类似于windows PE文件格式。在被Cobalt Strike加载和使用过程中，BOF是一段地址无关的Shellcode，BOF本身体积比较小，在传输过程中，适用于那些传输带宽小的模式，然后其本身运行在beacon进程内部，不会重新创建进程，也可以有效规避EDR。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Weblogic Analysis Attacked by T3 Protocol From CVE (part 2)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1785/"/>
    <id>https://tttang.com/archive/1785/</id>
    <published>2022-10-24T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这篇是继上篇中的T3协议进行漏洞利用，继续分析Weblogic CVE的有关利用方式和修复手法&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Python pickle反序列化浅析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1782/"/>
    <id>https://tttang.com/archive/1782/</id>
    <published>2022-10-21T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;之前所接触的大多是PHP 反序列化题型，最近遇见了一道Python pickle反序列化类型题，因此学习了一下其反序列化，简单总结如下，希望能对各位师傅有所帮助。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">ATT&amp;amp;CK中的攻与防——T1218</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1781/"/>
    <id>https://tttang.com/archive/1781/</id>
    <published>2022-10-20T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;此篇文章为ATTCK矩阵中的攻与防的第二篇，T1218是windows里面常见的规避EDR常用的渗透横向技巧，大部分技巧在互联网上都有师傅们分享，笔者只是将其中的内容总结起来，以ATT&amp;amp;CK矩阵来探究其中的攻防之道，regsvr32和rundll32曾在知识星球分享过，看过的师傅们看前面的即可，如若文章有技术问题，欢迎各位师傅在评论区交流&lt;/p&gt;
    </summary>
  </entry>

</feed>
