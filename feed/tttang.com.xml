<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-12-07T18:16:56+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">关于HackerOne上Grafana、jolokia、Flink攻击手法的学习</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1854/"/>
    <id>https://tttang.com/archive/1854/</id>
    <published>2022-11-30T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;那天凑巧上HackerOne看看，所以&lt;code&gt;jarij&lt;/code&gt;的&lt;a href=&quot;https://hackerone.com/jarij?type=user&quot; target=&quot;_blank&quot;&gt;漏洞报告&lt;/a&gt;刚一放出来就看到了。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">一条新的glibc IO_FILE利用链：_IO_obstack_jumps利用分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1845/"/>
    <id>https://tttang.com/archive/1845/</id>
    <published>2022-11-28T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;众所周知，由于移除了&lt;code&gt;__malloc_hook/__free_hook/__realloc_hook&lt;/code&gt;等等一众&lt;code&gt;hook&lt;/code&gt;全局变量，高版本&lt;code&gt;glibc&lt;/code&gt;想要劫持程序流，离不开攻击&lt;code&gt;_IO_FILE&lt;/code&gt;。而笔者近期在国外大佬博客中发现一条新的可利用的函数调用链，与&lt;code&gt;house of apple2&lt;/code&gt;一样，只需要一次地址任意写，而且适用于目前所有的glibc版本，故在此结合源码和自己的理解总结分享，也感谢&lt;code&gt;roderick&lt;/code&gt;师傅和&lt;code&gt;whiter&lt;/code&gt;师傅的指导与支持。如果有哪里不对恳请师傅们斧正！&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">浅谈JspWebshell之编码</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1840/"/>
    <id>https://tttang.com/archive/1840/</id>
    <published>2022-11-25T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;最近@phithon在知识星球中分享了一个多重编码的webshell姿势后，出于对代码实现的好奇简单看了看tomcat的具体实现以及尝试是否能够更深入的目的也便有了本篇&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">HTTP2 request smuggling</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1837/"/>
    <id>https://tttang.com/archive/1837/</id>
    <published>2022-11-24T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;最近看了一些HTTP请求走私的文章，都是基于HTTP/1.1的。HTTP/2.0已经发布多年，是否存在走私问题？进行检索后发现文章大都是讲H2C的，关于HTTP2的安全问题没有细致的讲解。在&lt;strong&gt;Black Hat USA 2021&lt;/strong&gt;上，James Kettle演讲了议题：&lt;strong&gt;《HTTP/2: The Sequel is Always Worse》&lt;/strong&gt;。经过一段时间的阅读，写下这篇文章。如果有描述错误的地方，还请各位师傅指正。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">企业蜜罐建设实践</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1832/"/>
    <id>https://tttang.com/archive/1832/</id>
    <published>2022-11-23T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;今年10月份接到领导临时安排的一个任务，要求部署一套可以置于互联网上的蜜罐环境，并且要求实现对本公司最新协同办公系统在野利用0day的捕获，同时也需要实现对在野利用Nday的态势感知和各类可疑攻击行为的捕获，之后通过对攻击行为分析确定协同办公系统存在的脆弱点并进行修复，从而全面提升协同办公系统的安全性&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Weblogic Analysis Attacked by JNDI injection From CVE(part 4)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1830/"/>
    <id>https://tttang.com/archive/1830/</id>
    <published>2022-11-22T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;接着前面的分析，这里主要是两个由&lt;code&gt;JtaTransactionManager&lt;/code&gt;类的&lt;code&gt;readObject&lt;/code&gt;方法调用过程中而造成的JNDI注入，其中第一个(CVE-2018-3191)是使用T3进行发送序列化数据，而第二个(CVE-2020-2551)这个经典的漏洞是通过IIOP来进行序列化数据的传递的&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">ZK框架权限绕过导致R1Soft Server Backup Manager RCE并接管Agent</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1833/"/>
    <id>https://tttang.com/archive/1833/</id>
    <published>2022-11-21T12:00:00+08:00</published>
    <summary type="text">
      
    </summary>
  </entry>
  <entry>
    <title type="text">一种JDBC Attack的新方式</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1831/"/>
    <id>https://tttang.com/archive/1831/</id>
    <published>2022-11-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;抽空在H1上看到了一个和JDBC Attack有关的案例，于是就简单看了下。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">com组件的从0-1</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1824/"/>
    <id>https://tttang.com/archive/1824/</id>
    <published>2022-11-17T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文是作者从0到1学习com的一个过程，记录了从初识com到com的武器化利用以及挖掘。com组件博大精深，无论是从开发的角度还是安全的角度都非常值得研究，本文仅作入门贴。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">SnakeYaml反序列化及不出网利用</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1815/"/>
    <id>https://tttang.com/archive/1815/</id>
    <published>2022-11-16T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;正文之前先了解一下SPI机制。&lt;/p&gt;
&lt;p&gt;SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的接口，它可以用来启用框架扩展和替换组件。 SPI的作用就是为这些被扩展的API寻找服务实现。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">fuzzer AFL 源码分析（四）-监控</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1753/"/>
    <id>https://tttang.com/archive/1753/</id>
    <published>2022-11-15T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;上一部分对&lt;code&gt;afl&lt;/code&gt;如何实现反馈进行了较为详细的介绍，本文将对&lt;code&gt;afl&lt;/code&gt;如何实现监控进行分析。监控是指&lt;code&gt;afl&lt;/code&gt;能够成功运行目标程序、获取目标程序的反馈信息（运行状态）并判定此次运行是否有效（此次运行的样例是否增加了模糊测试的覆盖率、是否崩溃或超时），以更有效的指导下一次模糊测试及保存崩溃。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">XML外部实体注入（XXE）攻击方式汇总</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1813/"/>
    <id>https://tttang.com/archive/1813/</id>
    <published>2022-11-14T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;关于 XXE 攻击方式汇总的相应靶场通关记录已经完成，靶场使用的是 Port Swigger 靶场，若有需要，欢迎师傅们前往学习，Github地址：&lt;a href=&quot;https://github.com/shungli923/WowBigBug/blob/main/%E9%9D%B6%E5%9C%BA%E6%94%BB%E7%95%A5/XXE%20PortSwigger%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0.md&quot; target=&quot;_blank&quot;&gt;XXE 靶场通关笔记&lt;/a&gt;&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">从SPI机制到JDBC后门实现</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1819/"/>
    <id>https://tttang.com/archive/1819/</id>
    <published>2022-11-11T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;SPI（Service Provider Interface），是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Dumping Lsass Process Memory In Different Ways</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1810/"/>
    <id>https://tttang.com/archive/1810/</id>
    <published>2022-11-10T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;strong&gt;Dumping Credentials from Lsass Process Memory&lt;/strong&gt;在内网渗透流程中起到不可忽视的作用。本文将从源码以及对抗杀软的角度对几种仍然有效的方法进行分析。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">初探HTTP Request Smuggling</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1808/"/>
    <id>https://tttang.com/archive/1808/</id>
    <published>2022-11-09T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;code&gt;ISCC2022[让我康康]&lt;/code&gt;这道赛题在初次接触时令我记忆犹新，之前由于学习知识其他也一直没有对HTTP请求走私进行相关学习，最近学习过后简单总结如下，希望能对正在学习HTTP请求走私的师傅有所帮助。&lt;/p&gt;
    </summary>
  </entry>

</feed>
