<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-06-18T18:18:01+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">深入注册表监控</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1588/"/>
    <id>https://tttang.com/archive/1588/</id>
    <published>2022-06-17T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;注册表是windows的重要数据库，存放了很多重要的信息以及一些应用的设置，对注册表进行监控并防止篡改是十分有必要的。在64位系统下微软提供了&lt;code&gt;CmRegisterCallback&lt;/code&gt;这个回调函数来实时监控注册表的操作，那么既然这里微软提供了这么一个方便的接口，病毒木马自然也会利用，这里我们就来探究其实现的原理和如何利用这个回调函数进行对抗&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">WMI攻守之道</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1624/"/>
    <id>https://tttang.com/archive/1624/</id>
    <published>2022-06-16T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;Windows Management Instrumentation(Windows 管理规范) 即WMI，是微软实现的基于Web的企业管理(WBEM)。WMI使用通用信息模型(CIM)来表示系统、应用程序、网络、设备和其他托管组件。WMI支持本地和远程访问。WMI底层基于分布式组件对象模型(DCOM)或者Windows远程管理(WinRM)。程序员们可以使用脚本语言(例如powershell)，或者C++，通过COM技术与WMI进行交互。本文行文仓促，如有错误，请各位积极指正。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Privilege Escalation - Exploiting RBCD Using a User Account</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1617/"/>
    <id>https://tttang.com/archive/1617/</id>
    <published>2022-06-15T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;基于资源的约束委派（Resource Based Constrained Delegation，RBCD）是在 Windows Server 2012 中新引入的功能，与传统的约束委派相比，它不再需要拥有 SeEnableDelegationPrivilege 特权的域管理员去设置相关属性，并且将设置委派的权限交换给了服务资源自身，即服务自己可以决定谁可以对我进行委派。基于资源的约束性委派的关键在于 &lt;code&gt;msDS-AllowedToActOnBehalfOfOtherIdentity&lt;/code&gt; 属性的设置。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Enumeration and lateral movement in GCP environments(译文)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1626/"/>
    <id>https://tttang.com/archive/1626/</id>
    <published>2022-06-14T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在这篇文章中，我们将为读者详细介绍在某次渗透测试过程中，我们是如何用本地的GCP工具来进行态势感知和横向移动，从而成功地拿下了一个混合型GCP托管的基础设施的。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">CVE-2022-26923  Active Directory 域提权 复现与分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1613/"/>
    <id>https://tttang.com/archive/1613/</id>
    <published>2022-06-13T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;该漏洞允许低权限用户在安装了 Active Directory 证书服务 (AD CS) 服务器角色的默认 Active Directory 环境中将权限提升到域管理员。现在很少有没有安装 AD CS 的大中型 Active Directory 环境，所以该漏洞危害和利用性都较强。该漏洞已作为Microsoft &lt;a href=&quot;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-26923&quot; target=&quot;_blank&quot;&gt;2022 年 5 月安全更新&lt;/a&gt;的一部分进行了修补。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">libmalloc初探——TinyHeap</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1572/"/>
    <id>https://tttang.com/archive/1572/</id>
    <published>2022-06-10T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;libmalloc为MacOS以及IOS中的用户态下的堆管理器，在实现细节上与linux下常用的glibc有较大的不同，本文初步介绍一下libmalloc中Tiny堆的管理机制和一些基本的漏洞利用。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">glibc2.29+的off by null利用</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1614/"/>
    <id>https://tttang.com/archive/1614/</id>
    <published>2022-06-09T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文介绍了off by null的爆破法和直接法两类做法，并基于已有的高版本off by null的利用技巧做了一点改进，提出一种无特殊限制条件的直接法，更具有普适性。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">SpringBoot Actuator之 logging.config grovvy rce分析及内存马注入</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1620/"/>
    <id>https://tttang.com/archive/1620/</id>
    <published>2022-06-08T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;Spring boot最经典的漏洞莫过于由于配置不当导致Actuator的相关路由暴露从而导致信息泄露以及各种远程命令执行漏洞。根据&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.1.10.RELEASE/reference/htmlsingle/#production-ready-endpoints&quot; target=&quot;_blank&quot;&gt;spingboot官方文档&lt;/a&gt;，以spring-boot 2.1.10版本为例，对于web应用程序来说，以下端口默认是开启的。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">浅谈EDR绕过</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1618/"/>
    <id>https://tttang.com/archive/1618/</id>
    <published>2022-06-07T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;我们知道一般EDR对可疑程序进行监控一般都会采用往程序里注入到检测的进程中，通过hook一些敏感的3环API来判断程序是否进行一些恶意操作，那么我们可以通过添加流程缓解措施和漏洞利用保护参考来实现保护，从而防止EDR的dll注入对进程进行检测。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">域内特权提升 - 将 Certifried 与 KrbRelay 结合利用</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1605/"/>
    <id>https://tttang.com/archive/1605/</id>
    <published>2022-06-06T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;2022 年 5 月 10 日，微软发布补丁修复了一个 Active Directory 域权限提升漏洞（CVE-2022–26923，Certifried）。该漏洞是由于对用户属性的不正确获取，允许低权限用户在安装了 Active Directory 证书服务（AD CS）服务器角色的 Active Directory 环境中将权限提升至域管理员。这一漏洞最早由安全研究员 Oliver Lyak（&lt;a href=&quot;https://twitter.com/ly4k_&quot; target=&quot;_blank&quot;&gt;@ly4k_&lt;/a&gt;）在 2021 年 12 月 14 日通过 Zero Day Initiative 向微软报告，Microsoft 在 2022 年 5 月的安全更新中对其进行了修补。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">JNDI注入分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1611/"/>
    <id>https://tttang.com/archive/1611/</id>
    <published>2022-06-02T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;code&gt;JNDI(Java Naming and Directory Interface)&lt;/code&gt;是&lt;code&gt;Java&lt;/code&gt;提供的&lt;code&gt;Java&lt;/code&gt;命名和目录接口。通过调用&lt;code&gt;JNDI&lt;/code&gt;的&lt;code&gt;API&lt;/code&gt;可以定位资源和其他程序对象。&lt;br&gt;
&lt;code&gt;JNDI&lt;/code&gt;是&lt;code&gt;Java EE&lt;/code&gt;的重要部分，&lt;code&gt;JNDI&lt;/code&gt;可访问的现有的目录及服务有:&lt;code&gt;JDBC&lt;/code&gt;、&lt;code&gt;LDAP&lt;/code&gt;、&lt;code&gt;RMI&lt;/code&gt;、&lt;code&gt;DNS&lt;/code&gt;、&lt;code&gt;NIS&lt;/code&gt;、&lt;code&gt;CORBA&lt;/code&gt;。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Learning Linux kernel exploitation - Part 1 - Laying the groundwork（译文）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1606/"/>
    <id>https://tttang.com/archive/1606/</id>
    <published>2022-06-01T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文中，我们将以&lt;a href=&quot;https://2020.ctf.link/&quot; target=&quot;_blank&quot;&gt;hxp2020 CTF&lt;/a&gt;中的“kernel-rop”挑战题为基础，介绍如何利用驱动程序中的漏洞进行提权。我们知道，内核漏洞利用的主要目标，与用户空间的漏洞利用有很大不同，它不是直接生成一个shell，而是控制存在漏洞的内核代码以实现提权。至少在典型的CTF风格的场景中，生成shell都是后面的事情。有时，只要获得了任意读写原语，就足以渗出敏感信息，或覆盖与安全休戚相关的东西。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">浅谈Windows传统取证</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1608/"/>
    <id>https://tttang.com/archive/1608/</id>
    <published>2022-05-31T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在2021美亚杯对取证开始产生兴趣，断断续续的学习了一些浅显的取证技能。国内很多取证赛题也是伪取证，甚至用misc充数，正好这个学期有缘学习电子数据取证课程，平时接触最多的就是Windows传统取证，这里进行一点简单的分享。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">ETW的攻与防</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1612/"/>
    <id>https://tttang.com/archive/1612/</id>
    <published>2022-05-30T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;code&gt;ETW&lt;/code&gt;全称为&lt;code&gt;Event Tracing for Windows&lt;/code&gt;，即windows事件跟踪，它是Windows提供的原生的事件跟踪日志系统。由于采用内核层面的缓冲和日志记录机制，所以&lt;code&gt;ETW&lt;/code&gt;提供了一种非常高效的事件跟踪日志解决方案，本文基于&lt;code&gt;ETW&lt;/code&gt;探究其攻与防的实现&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">MQTT协议-车联网应用&amp;amp;&amp;amp;源码分析（一）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1609/"/>
    <id>https://tttang.com/archive/1609/</id>
    <published>2022-05-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;MQTT是基于TCP/IP协议栈构建的异步通信消息协议，是一种轻量级的发布、订阅信息传输协议。可在不可靠的网络环境中进行扩展，适用于设备硬件存储空间或网络带宽有限的场景。使用MQTT协议，消息发送者与接收者不受时间和空间的限制。基于发布/订阅模式的物联网通信协议，简单易实现、支持 QoS、报文小等特点，专门为网络受限设备、低宽带以及高延迟和不可靠的网络而设计。由于以上轻量级的特点，是实现智能家居的首选传输协议。&lt;/p&gt;
    </summary>
  </entry>

</feed>
