<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link href="https://tttang.com/"/>
  <updated>2022-04-26T18:22:00+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title>滥用具备RWX-S权限且有签名的dll进行无感知的shellcode注入</title>
    <link href="https://tttang.com/archive/1565/"/>
    <id>https://tttang.com/archive/1565/</id>
    <published>2022-04-26T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;常规的shellcode注入一般是通过&lt;code&gt;VirtualAllocEx&lt;/code&gt;,&lt;code&gt;WriteProcessMemory&lt;/code&gt; 和 &lt;code&gt;CreateRemoteThread&lt;/code&gt; 来实现的，但是这种方式是被安全软件重点监控的，同时微软提供的ETW接口也是可以轻易检测出上述方式进行代码注入的痕迹。本文的核心是讲解怎么利用具备 RWX-S 权限且自身有签名的白DLL进行一种比较隐蔽的shellcode注入，&lt;br&gt;
并讲解具体的代码实现以及在写代码实现的过程中遇到的坑。本方法是由文章提出的：&lt;a href=&quot;https://billdemirkapi.me/sharing-is-caring-abusing-shared-sections-for-code-injection/&quot; target=&quot;_blank&quot;&gt;https://billdemirkapi.me/sharing-is-caring-abusing-shared-sections-for-code-injection/&lt;/a&gt; ，详情可以参考此文章。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>CodeQL能找到log4shell(CVE-2021-44228)漏洞吗？</title>
    <link href="https://tttang.com/archive/1570/"/>
    <id>https://tttang.com/archive/1570/</id>
    <published>2022-04-25T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文将回答下面几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CodeQL能否找到log4shell这个漏洞&lt;/li&gt;
&lt;li&gt;如何基于log4j-api-2.14.1.jar和log4j-core-2.14.1.jar创建CodeQL database&lt;/li&gt;
&lt;li&gt;如何基于CodeQL进行调用图分析&lt;/li&gt;
&lt;li&gt;CodeQL如何解析虚拟函数调用&lt;/li&gt;
&lt;li&gt;如何对CodeQL的污点分析进行debug&lt;/li&gt;
&lt;/ol&gt;
    </summary>
  </entry>
  <entry>
    <title>内网渗透 -- NTLM 反射分析及土豆家族</title>
    <link href="https://tttang.com/archive/1560/"/>
    <id>https://tttang.com/archive/1560/</id>
    <published>2022-04-24T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内网渗透 -- NTLM 反射分析及土豆家族&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#前置知识点&quot; target=&quot;_blank&quot;&gt;前置知识点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#windows-sspsspi&quot; target=&quot;_blank&quot;&gt;Windows SSP&amp;amp;SSPI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sspi和ssp如何工作&quot; target=&quot;_blank&quot;&gt;SSPI和SSP如何工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ntlm-ssp-原理ntlm-身份验证协议&quot; target=&quot;_blank&quot;&gt;NTLM SSP 原理(NTLM 身份验证协议)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#integration-with-smb&quot; target=&quot;_blank&quot;&gt;Integration with SMB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lmcompatibilitylevel&quot; target=&quot;_blank&quot;&gt;LmCompatibilityLevel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#signing&quot; target=&quot;_blank&quot;&gt;Signing&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ldap-签名&quot; target=&quot;_blank&quot;&gt;LDAP 签名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#negotiation&quot; target=&quot;_blank&quot;&gt;Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#土豆家族分析&quot; target=&quot;_blank&quot;&gt;土豆家族分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#原理讲解&quot; target=&quot;_blank&quot;&gt;原理讲解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#如何利用&quot; target=&quot;_blank&quot;&gt;如何利用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#历史土豆分析&quot; target=&quot;_blank&quot;&gt;历史土豆分析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#origin-potato_ms08-068-土豆始祖漏洞&quot; target=&quot;_blank&quot;&gt;Origin Potato_MS08-068 (土豆始祖漏洞)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ms16-075_hot-potato-ms08-068的变种&quot; target=&quot;_blank&quot;&gt;MS16-075_HOT Potato (MS08-068的变种)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rotten-potato-ms16-075的变种&quot; target=&quot;_blank&quot;&gt;Rotten Potato (MS16-075的变种)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#juicy-potato-ms16-075的变种&quot; target=&quot;_blank&quot;&gt;Juicy Potato (MS16-075的变种)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sweet-potato_juicy-potato衍生版本&quot; target=&quot;_blank&quot;&gt;Sweet Potato_Juicy Potato衍生版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#printspoofer&quot; target=&quot;_blank&quot;&gt;PrintSpoofer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#roguepotato&quot; target=&quot;_blank&quot;&gt;RoguePotato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cve-2019-1384_ghost-potato&quot; target=&quot;_blank&quot;&gt;CVE-2019-1384_Ghost potato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参考&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    </summary>
  </entry>
  <entry>
    <title>PE文件结构从初识到简单shellcode注入</title>
    <link href="https://tttang.com/archive/1553/"/>
    <id>https://tttang.com/archive/1553/</id>
    <published>2022-04-22T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;将自己学习的PE文件结构进行总结形成文章这件事情，一直躺在我的Notion TodoList里，但是一直是未完成的状态哈哈，拖了那么久也该让它状态变成已完成了。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>The More You Know, The More You Know You Don’t Know: A Year in Review of 0-days Used In-the-Wild in 2021（译文）</title>
    <link href="https://tttang.com/archive/1568/"/>
    <id>https://tttang.com/archive/1568/</id>
    <published>2022-04-22T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是我们第三次对在野利用的0-day漏洞进行年度回顾[2020年，2019年]。每年，我们都对所有已检测到并公之于众的在野0-day漏洞进行回顾，并总结我们认为的趋势和收获。这份报告的宗旨，并非详细说明各个漏洞，而是把当年的漏洞作为整体进行分析，寻找趋势、差距、经验教训、成功案例等。如果您对单个漏洞的分析感兴趣的话，可以访问我们的根本原因分析库。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Postgresql 渗透总结</title>
    <link href="https://tttang.com/archive/1547/"/>
    <id>https://tttang.com/archive/1547/</id>
    <published>2022-04-21T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;Postgresql 数据库作为 python 应用中比较常见的数据库，其利用手段公开的不多,而且利用方式也比较单一，我搜集了国内外一些相关的利用思路进行总结，如有遗漏还请指正。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Exploit Development: Browser Exploitation on Windows - CVE-2019-0567, A Microsoft Edge Type Confusion Vulnerability (Part 2) （译文）</title>
    <link href="https://tttang.com/archive/1557/"/>
    <id>https://tttang.com/archive/1557/</id>
    <published>2022-04-20T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在第一篇文章中，我们介绍了ChakraCore exploit的开发环境，考察了JavaScript（更具体地说，Chakra/ChakraCore引擎）是如何管理内存中的动态对象的，并分析了CVE-2019-0567漏洞——它是一个影响基于Chakra引擎的Microsoft Edge和ChakraCore的类型混淆漏洞。在本文中，我们将为读者介绍该漏洞的概念验证脚本，该脚本能够利用类型混淆漏洞让Edge和ChakraCore发生崩溃，进而将其转换为一个读/写原语。然后，该原语将被用来获得针对ChakraCore和ChakraCore shell（ch.exe）的代码执行，而ChakraCore shell本质上就是一个允许执行JavaScript代码的命令行JavaScript shell。就本文来说，我们可以把ch.exe看作是Microsoft Edge，但没有提供可视化功能。接下来，在第三篇文章中，我们将把这里介绍的exploit移植到Microsoft Edge上，以获得完整的代码执行。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>bpf,ebpf一些原理以及逆向基于libbpf-bootstrap编写的bpf文件</title>
    <link href="https://tttang.com/archive/1550/"/>
    <id>https://tttang.com/archive/1550/</id>
    <published>2022-04-19T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;BPF 的全称是 Berkeley Packet Filter，是一个用于过滤(filter)网络报文(packet)的架构。（例如tcpdump)，目前称为Cbpf（Classical bpf）。BPF 在数据包过滤上引入了两大革新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个新的虚拟机 (VM) 设计，可以有效地工作在基于寄存器结构的 CPU 之上；&lt;/li&gt;
&lt;li&gt;应用程序使用缓存只复制与过滤数据包相关的数据，不会复制数据包的所有信息。这样可以最大程度地减少BPF 处理的数据；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这些巨大的改进，所有的 Unix 系统都选择采用 BPF 作为网络数据包过滤技术，直到今天，许多 Unix 内核的派生系统中（包括 Linux 内核）仍使用该实现。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>构建API调用框架绕过杀软hook</title>
    <link href="https://tttang.com/archive/1546/"/>
    <id>https://tttang.com/archive/1546/</id>
    <published>2022-04-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;我们知道杀软在API函数的监控上一般有两种手段，一种是在3环直接通过挂钩到自己的函数判断是否调用了这个API，另外一种方式就是在0环去往SSDT表的路径上挂钩来判断进0环后的操作。那么我们如果不想杀软监控我们的行为，之前提过的内核重载是一种绕过的方式，但是内核重载的动静太大，这里我们就通过直接重写3环到0环的API，通过重写&lt;code&gt;KiFastCallEntry&lt;/code&gt;来自己调用内核的函数，以达到规避杀软的效果。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>内网渗透--NTLM中继与反射浅析</title>
    <link href="https://tttang.com/archive/1548/"/>
    <id>https://tttang.com/archive/1548/</id>
    <published>2022-04-15T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本章主要介绍NTLM中继和反射&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NTLM中继和反射&lt;/li&gt;
&lt;li&gt;[NTLM中继]&lt;ul&gt;
&lt;li&gt;[SMB 协议和欺骗]&lt;/li&gt;
&lt;li&gt;[工具介绍]&lt;/li&gt;
&lt;li&gt;[实战解析]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[NTLM反射]&lt;ul&gt;
&lt;li&gt;[原理讲解]&lt;/li&gt;
&lt;li&gt;[利用方法]&lt;/li&gt;
&lt;li&gt;[历史土豆分析]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结知识点&lt;/li&gt;
&lt;/ul&gt;
    </summary>
  </entry>
  <entry>
    <title>mssql 提权总结</title>
    <link href="https://tttang.com/archive/1545/"/>
    <id>https://tttang.com/archive/1545/</id>
    <published>2022-04-14T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;最近一段时间学习了MSSQL数据库提权相关的知识，总结了一些常见手段，应该是比较全的了，如有遗漏还请指正。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>How I hacked an ESA&amp;#x27;s experimental satellite（译文）</title>
    <link href="https://tttang.com/archive/1542/"/>
    <id>https://tttang.com/archive/1542/</id>
    <published>2022-04-13T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;strong&gt;Hacking satellite&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这两个字，听起来真的令人印象深刻。至少对我来说是这样。&lt;/p&gt;
&lt;p&gt;这是黑客文化中的一个梦想，经常出现在关于间谍/黑客题材的电视剧/电影中，藉此可以“重定向卫星”，以便从轨道上更好地观察敌人的行动。&lt;/p&gt;
&lt;p&gt;从小时候起，我就一直梦想着获得这样的技能：黑掉一些你看不到它们，但它们却能看到你的东西。由于卫星能够赋予用户强大的力量，所以，它自然是国家防御中最关键的系统之一，因此，卫星应该很难被黑客侵入的。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>ByteCodeDL原理篇之手把手教你实现污点分析</title>
    <link href="https://tttang.com/archive/1541/"/>
    <id>https://tttang.com/archive/1541/</id>
    <published>2022-04-12T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文主要是根据&lt;a href=&quot;https://yanniss.github.io/ptaint-oopsla17-prelim.pdf&quot; target=&quot;_blank&quot;&gt;ptaint&lt;/a&gt;这篇论文的思想：将指针分析和污点分析统一起来进行分析，实现ByteCodeDL的污点分析功能，在阅读本文之前建议先学习下面三份资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yanniss.github.io/ptaint-oopsla17-prelim.pdf&quot; target=&quot;_blank&quot;&gt;https://yanniss.github.io/ptaint-oopsla17-prelim.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IA08d-kiCy8&quot; target=&quot;_blank&quot;&gt;https://www.youtube.com/watch?v=IA08d-kiCy8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pascal-group.bitbucket.io/lectures/Security.pdf&quot; target=&quot;_blank&quot;&gt;https://pascal-group.bitbucket.io/lectures/Security.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    </summary>
  </entry>
  <entry>
    <title>从零开始，分析Spring Framework RCE</title>
    <link href="https://tttang.com/archive/1532/"/>
    <id>https://tttang.com/archive/1532/</id>
    <published>2022-04-11T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;如果需要让你对一套CMS的安全性进行研究分析，你会从哪里入手？&lt;/p&gt;
&lt;p&gt;或许你会回答代码审计的那一套知识点。&lt;/p&gt;
&lt;p&gt;那么，如果需要让你要对 Spring Framework 框架的安全性进行研究分析，你会从哪里入手？&lt;/p&gt;
&lt;p&gt;更宽泛一点，如果需要让你对一个大型的开源组件的安全性进行研究分析，你会从哪里入手？&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Attacking Active Directory: 0 to 0.9（译文，下篇）</title>
    <link href="https://tttang.com/archive/1526/"/>
    <id>https://tttang.com/archive/1526/</id>
    <published>2022-04-08T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在本文中，我们将继续为读者介绍与Active Directory相关的攻防知识。&lt;/p&gt;
    </summary>
  </entry>

</feed>
