<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link href="https://tttang.com/"/>
  <updated>2022-05-27T12:33:31+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title>MQTT协议-车联网应用&amp;amp;&amp;amp;源码分析（一）</title>
    <link href="https://tttang.com/archive/1609/"/>
    <id>https://tttang.com/archive/1609/</id>
    <published>2022-05-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;MQTT是基于TCP/IP协议栈构建的异步通信消息协议，是一种轻量级的发布、订阅信息传输协议。可在不可靠的网络环境中进行扩展，适用于设备硬件存储空间或网络带宽有限的场景。使用MQTT协议，消息发送者与接收者不受时间和空间的限制。基于发布/订阅模式的物联网通信协议，简单易实现、支持 QoS、报文小等特点，专门为网络受限设备、低宽带以及高延迟和不可靠的网络而设计。由于以上轻量级的特点，是实现智能家居的首选传输协议。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>CVE-2022-30781：一条普通的 Git 命令导致的 Gitea RCE</title>
    <link href="https://tttang.com/archive/1607/"/>
    <id>https://tttang.com/archive/1607/</id>
    <published>2022-05-26T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;今年年初的时候，我挖掘到了一枚 Gogs 中因为未对用户可控的目录路径进行检测，从而导致后续路径拼接可以导致目录穿越的漏洞（CVE-2022-0415）。&lt;br&gt;
攻击者能上传覆盖环境中的任意文件，在覆盖任意文件后，我使用的是之前 CVE-2019-11229 中提到的方法，覆盖一个 Git 仓库中 &lt;code&gt;.git/config&lt;/code&gt; 文件，设置 &lt;code&gt;core.sshCommand&lt;/code&gt; 参数从而达到远程任意命令执行。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Fastjson 反序列化分析</title>
    <link href="https://tttang.com/archive/1579/"/>
    <id>https://tttang.com/archive/1579/</id>
    <published>2022-05-25T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;学习Fastjson反序列化&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Exploiting a Use-After-Free for code execution in every version of Python 3[译文]</title>
    <link href="https://tttang.com/archive/1601/"/>
    <id>https://tttang.com/archive/1601/</id>
    <published>2022-05-24T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;不久前，我在浏览Python的&lt;a href=&quot;https://bugs.python.org/&quot; target=&quot;_blank&quot;&gt;bug追踪系统&lt;/a&gt;时，偶然发现了一个bug，具体描述为“&lt;a href=&quot;https://bugs.python.org/issue15994&quot; target=&quot;_blank&quot;&gt;memoryview to freed memory can cause segfault&lt;/a&gt;”。这个bug提交于2012年，最初出现在Python 2.7版本中；但直到今天，已经10年过去了，这个bug还没有得到修复。这激起了我的极大兴趣，所以，我决定仔细研究一下这个bug。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>fuzzer AFL 源码分析（一）- 编译</title>
    <link href="https://tttang.com/archive/1595/"/>
    <id>https://tttang.com/archive/1595/</id>
    <published>2022-05-23T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;学习经典的&lt;code&gt;fuzz&lt;/code&gt;框架&lt;code&gt;AFL&lt;/code&gt;，通过源码的阅读学习&lt;code&gt;fuzz&lt;/code&gt;，为以后针对特定目标进行模糊测试打下基础。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AFL&lt;/code&gt;的基础使用可以去看&lt;a href=&quot;https://f0cus7.github.io/2022/05/14/fuzz-%E9%80%9A%E8%BF%87afl-training%E5%AD%A6%E4%B9%A0afl/&quot; target=&quot;_blank&quot;&gt;通过afl-training学习afl&lt;/a&gt;，具体的使用不再进行说明。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>A new way to bypass __wakeup() and build POP chain</title>
    <link href="https://tttang.com/archive/1603/"/>
    <id>https://tttang.com/archive/1603/</id>
    <published>2022-05-20T12:00:00+08:00</published>
    <summary type="text">
      &lt;blockquote&gt;
&lt;p&gt;本文以 Laravel 9.1.8 为例，介绍一个通用的新思路，用以绕过 pop chain 构造过程中遇到的  &lt;code&gt;__wakeup()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    </summary>
  </entry>
  <entry>
    <title>Attack Surface Mining For AD CS</title>
    <link href="https://tttang.com/archive/1593/"/>
    <id>https://tttang.com/archive/1593/</id>
    <published>2022-05-19T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本篇文章大部分翻译并复现自 Will Schroeder（&lt;a href=&quot;https://twitter.com/harmj0y&quot; target=&quot;_blank&quot;&gt;@harmj0y&lt;/a&gt;）和 Lee Christensen（&lt;a href=&quot;https://twitter.com/tifkin_&quot; target=&quot;_blank&quot;&gt;@tifkin_&lt;/a&gt;） 在 2021 年的 BlackHat 大会上所发布的白皮书 &lt;a href=&quot;https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf&quot; target=&quot;_blank&quot;&gt;《Certified Pre-Owned - Abusing Active Directory Certificate Services》&lt;/a&gt;，其中详细介绍了关于 Active Directory Certificate Services 的滥用方法，关于 Active Directory 证书服务的攻击方法第一次系统性的进入我们的视野。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>windows环境下的自保护探究</title>
    <link href="https://tttang.com/archive/1584/"/>
    <id>https://tttang.com/archive/1584/</id>
    <published>2022-05-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;我们要想在32位下实现进程保护很简单，通过SSDT hook重写函数即可实现，但是在64位系统下因为引入了&lt;code&gt;PG&lt;/code&gt;和&lt;code&gt;DSE&lt;/code&gt;的原因，导致&lt;code&gt;SSDT hook&lt;/code&gt;实现起来处处受限。但微软同样为了系统安全，增加了一个对象回调函数的接口，利用该回调可以实现对对象请求的过滤保护自身的进程，目前大部分64位下的安全软件保护机制都是基于该方法，我们深入进行探究&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>HOW DO YOU ACTUALLY FIND BUGS?（译文）</title>
    <link href="https://tttang.com/archive/1597/"/>
    <id>https://tttang.com/archive/1597/</id>
    <published>2022-05-17T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文是根据具有12年从业经验的安全研究人员Mark Dowd在今年的OffensiveCon大会上面的主题演讲整理而成，主要讲解了他自己在挖掘软件漏洞方面的方法论。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Java安全之SnakeYaml反序列化分析</title>
    <link href="https://tttang.com/archive/1591/"/>
    <id>https://tttang.com/archive/1591/</id>
    <published>2022-05-16T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;snakeyaml包主要用来解析yaml格式的内容，yaml语言比普通的xml与properties等配置文件的可读性更高，像是Spring系列就支持yaml的配置文件，而SnakeYaml是一个完整的YAML1.1规范Processor，支持UTF-8/UTF-16，支持Java对象的序列化/反序列化，支持所有YAML定义的类型。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>浅析Shiro权限绕过</title>
    <link href="https://tttang.com/archive/1592/"/>
    <id>https://tttang.com/archive/1592/</id>
    <published>2022-05-13T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;简单总结一些Shiro的权限绕过。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>A blueprint for evading industry leading endpoint protection in 2022（译文）</title>
    <link href="https://tttang.com/archive/1573/"/>
    <id>https://tttang.com/archive/1573/</id>
    <published>2022-05-12T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;大约两年前，我辞去了全职红队操作员的工作。然而，它仍然是一个心仪的专业领域。几周前，我重新拾起昨日的爱好：绕过/逃避端点保护解决方案。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将探讨一系列可用于绕过行业领先的企业端点保护解决方案的技术。由于这纯粹是为了（道德）红队队员等安全从业者教育之用，因此我决定不公开发布源代码。本文旨在让安全行业的广大读者能够全面了解相关技术，而不是深入研究每种技术的细节。相反，具体的技术细节，读者可以参阅参考资料部分列出的文章。&lt;/p&gt;
&lt;p&gt;在模拟对抗过程中，“初始访问”阶段的一个关键挑战，就是绕过企业端点上的检测和响应能力 (EDR)。由于商业的c2框架向红队队员提供的是不可修改的shellcode和二进制文件，所以，安全解决方案供应商会提取这些代码的特征（或者成为签名），那么，为了植入这些代码，红队就必须对其特征（静态和行为特征）进行必要的混淆处理。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>对抗无落地的shellcode注入</title>
    <link href="https://tttang.com/archive/1581/"/>
    <id>https://tttang.com/archive/1581/</id>
    <published>2022-05-11T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;一般的shellcode加载到内存都是通过&lt;code&gt;LoadLibrary&lt;/code&gt;和&lt;code&gt;GetProcAddress&lt;/code&gt;来获取函数进行shellcode加载，亦或是通过&lt;code&gt;VirtualAllocEx&lt;/code&gt;远程申请一块空间来放入shellcode的地址进行加载。为了隐蔽，攻击者通常会通过PEB找到&lt;code&gt;InLoadOrderModuleList&lt;/code&gt;链表，自己去定位&lt;code&gt;LoadLibrary&lt;/code&gt;函数从而规避杀软对导入表的监控。攻击者先把shellcode加密，在写入时解密存放到内存空间，使用基于文件检测的方法，是无能为力的，那么这种无落地的方式，最终都会在内存中一览无余。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Struts2漏洞集合分析与梳理</title>
    <link href="https://tttang.com/archive/1583/"/>
    <id>https://tttang.com/archive/1583/</id>
    <published>2022-05-10T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文针对Struts2一些经典漏洞进行分析和梳理。为什么要分析struts2这些略久远的漏洞呢？最近热议的Spring jdk9 漏洞，其中涉及到Struts2+类加载器漏洞的利用方式，由此有了重新梳理Struts2历史漏洞的想法。漏洞虽然是过去的，但知识点永远是知识点。希望通过对Struts2的一些经典漏洞的分析，获取新的认识和知识。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Musl 程序分析和调试环境配置 &amp;amp;&amp;amp; 部分源码分析</title>
    <link href="https://tttang.com/archive/1582/"/>
    <id>https://tttang.com/archive/1582/</id>
    <published>2022-05-09T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这里探索了很多方式，勘误之前的启动方式实际上存在一些问题，这里终于探索到了最完备的musl 调试环境，这里特别感谢我的学弟gxh为勘误做出的贡献。&lt;br&gt;
算是musl 学习的正式终结。&lt;/p&gt;
    </summary>
  </entry>

</feed>
