<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-11-23T06:17:30+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">Weblogic Analysis Attacked by JNDI injection From CVE(part 4)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1830/"/>
    <id>https://tttang.com/archive/1830/</id>
    <published>2022-11-22T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;接着前面的分析，这里主要是两个由&lt;code&gt;JtaTransactionManager&lt;/code&gt;类的&lt;code&gt;readObject&lt;/code&gt;方法调用过程中而造成的JNDI注入，其中第一个(CVE-2018-3191)是使用T3进行发送序列化数据，而第二个(CVE-2020-2551)这个经典的漏洞是通过IIOP来进行序列化数据的传递的&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">ZK框架权限绕过导致R1Soft Server Backup Manager RCE并接管Agent</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1833/"/>
    <id>https://tttang.com/archive/1833/</id>
    <published>2022-11-21T12:00:00+08:00</published>
    <summary type="text">
      
    </summary>
  </entry>
  <entry>
    <title type="text">一种JDBC Attack的新方式</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1831/"/>
    <id>https://tttang.com/archive/1831/</id>
    <published>2022-11-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;抽空在H1上看到了一个和JDBC Attack有关的案例，于是就简单看了下。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">com组件的从0-1</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1824/"/>
    <id>https://tttang.com/archive/1824/</id>
    <published>2022-11-17T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文是作者从0到1学习com的一个过程，记录了从初识com到com的武器化利用以及挖掘。com组件博大精深，无论是从开发的角度还是安全的角度都非常值得研究，本文仅作入门贴。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">SnakeYaml反序列化及不出网利用</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1815/"/>
    <id>https://tttang.com/archive/1815/</id>
    <published>2022-11-16T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;正文之前先了解一下SPI机制。&lt;/p&gt;
&lt;p&gt;SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的接口，它可以用来启用框架扩展和替换组件。 SPI的作用就是为这些被扩展的API寻找服务实现。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">fuzzer AFL 源码分析（四）-监控</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1753/"/>
    <id>https://tttang.com/archive/1753/</id>
    <published>2022-11-15T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;上一部分对&lt;code&gt;afl&lt;/code&gt;如何实现反馈进行了较为详细的介绍，本文将对&lt;code&gt;afl&lt;/code&gt;如何实现监控进行分析。监控是指&lt;code&gt;afl&lt;/code&gt;能够成功运行目标程序、获取目标程序的反馈信息（运行状态）并判定此次运行是否有效（此次运行的样例是否增加了模糊测试的覆盖率、是否崩溃或超时），以更有效的指导下一次模糊测试及保存崩溃。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">XML外部实体注入（XXE）攻击方式汇总</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1813/"/>
    <id>https://tttang.com/archive/1813/</id>
    <published>2022-11-14T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;关于 XXE 攻击方式汇总的相应靶场通关记录已经完成，靶场使用的是 Port Swigger 靶场，若有需要，欢迎师傅们前往学习，Github地址：&lt;a href=&quot;https://github.com/shungli923/WowBigBug/blob/main/%E9%9D%B6%E5%9C%BA%E6%94%BB%E7%95%A5/XXE%20PortSwigger%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0.md&quot; target=&quot;_blank&quot;&gt;XXE 靶场通关笔记&lt;/a&gt;&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">从SPI机制到JDBC后门实现</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1819/"/>
    <id>https://tttang.com/archive/1819/</id>
    <published>2022-11-11T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;SPI（Service Provider Interface），是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Dumping Lsass Process Memory In Different Ways</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1810/"/>
    <id>https://tttang.com/archive/1810/</id>
    <published>2022-11-10T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;strong&gt;Dumping Credentials from Lsass Process Memory&lt;/strong&gt;在内网渗透流程中起到不可忽视的作用。本文将从源码以及对抗杀软的角度对几种仍然有效的方法进行分析。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">初探HTTP Request Smuggling</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1808/"/>
    <id>https://tttang.com/archive/1808/</id>
    <published>2022-11-09T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;code&gt;ISCC2022[让我康康]&lt;/code&gt;这道赛题在初次接触时令我记忆犹新，之前由于学习知识其他也一直没有对HTTP请求走私进行相关学习，最近学习过后简单总结如下，希望能对正在学习HTTP请求走私的师傅有所帮助。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">对ZDI公布的InfraSuite Device Master一揽子漏洞的分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1806/"/>
    <id>https://tttang.com/archive/1806/</id>
    <published>2022-11-08T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;看到zdi发了一堆洞，有反序列化、目录穿越、权限绕过等等，还是dotnet的，于是有了此文。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022 USTC Hackergame WriteUp 0x03</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1805/"/>
    <id>https://tttang.com/archive/1805/</id>
    <published>2022-11-07T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是 喵喵 2022 Hackergame WriteUp 的&lt;strong&gt;第三篇&lt;/strong&gt;，主要也是一些难度稍大的题目，以及喵喵的碎碎念。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022 USTC Hackergame WriteUp 0x02</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1804/"/>
    <id>https://tttang.com/archive/1804/</id>
    <published>2022-11-07T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是 喵喵 2022 Hackergame WriteUp 的&lt;strong&gt;第二篇&lt;/strong&gt;，主要包括一些难度稍大的题目，以 binary 类型为主。&lt;/p&gt;
&lt;p&gt;希望师傅们看了都能有所收获喵~&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022 USTC Hackergame WriteUp 0x01</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1803/"/>
    <id>https://tttang.com/archive/1803/</id>
    <published>2022-11-07T12:00:00+08:00</published>
    <summary type="text">
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;中国科学技术大学第九届信息安全大赛&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">如何基于volatility2构建“新”版本内核的profile</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1801/"/>
    <id>https://tttang.com/archive/1801/</id>
    <published>2022-11-04T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;前两天跳跳糖发表了一篇如何基于vol3构建symbols_table的文章 &lt;br&gt;
&lt;a href=&quot;https://tttang.com/archive/1762/&quot; target=&quot;_blank&quot;&gt;Linux新版内核下内存取证分析附CTF题&lt;/a&gt;&lt;br&gt;
vol3之于vol2，很大的改变就是用symbol_tables(符号表)替换了profile(配置文件)，vol3带有一个广泛的符号表库，并且可以基于内存映像本身为大多数 Windows 内存映像生成新的&lt;a href=&quot;https://volatility3.readthedocs.io/en/latest/volatility3.framework.interfaces.symbols.html#volatility3.framework.interfaces.symbols.SymbolTableInterface&quot; target=&quot;_blank&quot;&gt;符号表&lt;/a&gt;。&lt;br&gt;
最近的2022祥云杯正好出了一道需要自己构建新版本内核的题（这里“新&quot;指的是profile在互联网上找不到对应的profile），关于构建profile中文社区没发现什么文章。这里记录一下，直接用祥云杯的附件做例子了。&lt;/p&gt;
    </summary>
  </entry>

</feed>
