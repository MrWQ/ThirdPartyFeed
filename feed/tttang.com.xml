<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link href="https://tttang.com/"/>
  <updated>2022-05-19T06:18:10+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title>windows环境下的自保护探究</title>
    <link href="https://tttang.com/archive/1584/"/>
    <id>https://tttang.com/archive/1584/</id>
    <published>2022-05-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;我们要想在32位下实现进程保护很简单，通过SSDT hook重写函数即可实现，但是在64位系统下因为引入了&lt;code&gt;PG&lt;/code&gt;和&lt;code&gt;DSE&lt;/code&gt;的原因，导致&lt;code&gt;SSDT hook&lt;/code&gt;实现起来处处受限。但微软同样为了系统安全，增加了一个对象回调函数的接口，利用该回调可以实现对对象请求的过滤保护自身的进程，目前大部分64位下的安全软件保护机制都是基于该方法，我们深入进行探究&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>HOW DO YOU ACTUALLY FIND BUGS?（译文）</title>
    <link href="https://tttang.com/archive/1597/"/>
    <id>https://tttang.com/archive/1597/</id>
    <published>2022-05-17T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文是根据具有12年从业经验的安全研究人员Mark Dowd在今年的OffensiveCon大会上面的主题演讲整理而成，主要讲解了他自己在挖掘软件漏洞方面的方法论。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Java安全之SnakeYaml反序列化分析</title>
    <link href="https://tttang.com/archive/1591/"/>
    <id>https://tttang.com/archive/1591/</id>
    <published>2022-05-16T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;snakeyaml包主要用来解析yaml格式的内容，yaml语言比普通的xml与properties等配置文件的可读性更高，像是Spring系列就支持yaml的配置文件，而SnakeYaml是一个完整的YAML1.1规范Processor，支持UTF-8/UTF-16，支持Java对象的序列化/反序列化，支持所有YAML定义的类型。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>浅析Shiro权限绕过</title>
    <link href="https://tttang.com/archive/1592/"/>
    <id>https://tttang.com/archive/1592/</id>
    <published>2022-05-13T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;简单总结一些Shiro的权限绕过。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>A blueprint for evading industry leading endpoint protection in 2022（译文）</title>
    <link href="https://tttang.com/archive/1573/"/>
    <id>https://tttang.com/archive/1573/</id>
    <published>2022-05-12T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;大约两年前，我辞去了全职红队操作员的工作。然而，它仍然是一个心仪的专业领域。几周前，我重新拾起昨日的爱好：绕过/逃避端点保护解决方案。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将探讨一系列可用于绕过行业领先的企业端点保护解决方案的技术。由于这纯粹是为了（道德）红队队员等安全从业者教育之用，因此我决定不公开发布源代码。本文旨在让安全行业的广大读者能够全面了解相关技术，而不是深入研究每种技术的细节。相反，具体的技术细节，读者可以参阅参考资料部分列出的文章。&lt;/p&gt;
&lt;p&gt;在模拟对抗过程中，“初始访问”阶段的一个关键挑战，就是绕过企业端点上的检测和响应能力 (EDR)。由于商业的c2框架向红队队员提供的是不可修改的shellcode和二进制文件，所以，安全解决方案供应商会提取这些代码的特征（或者成为签名），那么，为了植入这些代码，红队就必须对其特征（静态和行为特征）进行必要的混淆处理。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>对抗无落地的shellcode注入</title>
    <link href="https://tttang.com/archive/1581/"/>
    <id>https://tttang.com/archive/1581/</id>
    <published>2022-05-11T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;一般的shellcode加载到内存都是通过&lt;code&gt;LoadLibrary&lt;/code&gt;和&lt;code&gt;GetProcAddress&lt;/code&gt;来获取函数进行shellcode加载，亦或是通过&lt;code&gt;VirtualAllocEx&lt;/code&gt;远程申请一块空间来放入shellcode的地址进行加载。为了隐蔽，攻击者通常会通过PEB找到&lt;code&gt;InLoadOrderModuleList&lt;/code&gt;链表，自己去定位&lt;code&gt;LoadLibrary&lt;/code&gt;函数从而规避杀软对导入表的监控。攻击者先把shellcode加密，在写入时解密存放到内存空间，使用基于文件检测的方法，是无能为力的，那么这种无落地的方式，最终都会在内存中一览无余。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Struts2漏洞集合分析与梳理</title>
    <link href="https://tttang.com/archive/1583/"/>
    <id>https://tttang.com/archive/1583/</id>
    <published>2022-05-10T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文针对Struts2一些经典漏洞进行分析和梳理。为什么要分析struts2这些略久远的漏洞呢？最近热议的Spring jdk9 漏洞，其中涉及到Struts2+类加载器漏洞的利用方式，由此有了重新梳理Struts2历史漏洞的想法。漏洞虽然是过去的，但知识点永远是知识点。希望通过对Struts2的一些经典漏洞的分析，获取新的认识和知识。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Musl 程序分析和调试环境配置 &amp;amp;&amp;amp; 部分源码分析</title>
    <link href="https://tttang.com/archive/1582/"/>
    <id>https://tttang.com/archive/1582/</id>
    <published>2022-05-09T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这里探索了很多方式，勘误之前的启动方式实际上存在一些问题，这里终于探索到了最完备的musl 调试环境，这里特别感谢我的学弟gxh为勘误做出的贡献。&lt;br&gt;
算是musl 学习的正式终结。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>starCTF2022-Web详解</title>
    <link href="https://tttang.com/archive/1569/"/>
    <id>https://tttang.com/archive/1569/</id>
    <published>2022-05-07T12:00:00+08:00</published>
    <summary type="text">
      
    </summary>
  </entry>
  <entry>
    <title>针对解释性语言包管理器的供应链攻击研究</title>
    <link href="https://tttang.com/archive/1587/"/>
    <id>https://tttang.com/archive/1587/</id>
    <published>2022-05-06T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是一篇NDSS 2021年发表的&lt;a href=&quot;https://arxiv.org/pdf/2002.01139.pdf&quot; target=&quot;_blank&quot;&gt;论文&lt;/a&gt;，相关的代码也已经&lt;a href=&quot;https://github.com/osssanitizer/maloss&quot; target=&quot;_blank&quot;&gt;开源&lt;/a&gt;，应该是目前比较全面的研究第三源安全的论文，刚好最近也在做软件供应链安全相关的事情，趁着五一假期翻译了一下。很巧的是OpenSSF(SASL也是它们的项目之一)也在4月28号也发布了&lt;a href=&quot;https://openssf.org/blog/2022/04/28/introducing-package-analysis-scanning-open-source-packages-for-malicious-behavior/&quot; target=&quot;_blank&quot;&gt;一篇文章&lt;/a&gt;也在号召社区一同来做动态检测，也在&lt;a href=&quot;https://github.com/ossf/package-analysis&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;上开源了相关代码，OpenSSF目前开源的项目只做了安装和导入时候的动态检测，相对简单一些。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>通过嵌入x64汇编隐藏数据&amp;amp;反调试</title>
    <link href="https://tttang.com/archive/1559/"/>
    <id>https://tttang.com/archive/1559/</id>
    <published>2022-05-05T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;我们知道在x64里面，从3环进入0环会调用&lt;code&gt;syscall&lt;/code&gt;，那么如果是32位的程序就需要首先转换为x64模式再通过&lt;code&gt;syscall&lt;/code&gt;进入0环，这里就会涉及到一系列64位寄存器的操作，我们通过探究其实现原理来达到隐藏数据和反调试的效果。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>GO逆向分析小结-goparse使用与深入理解interface</title>
    <link href="https://tttang.com/archive/1574/"/>
    <id>https://tttang.com/archive/1574/</id>
    <published>2022-04-29T12:00:00+08:00</published>
    <summary type="text">
      
    </summary>
  </entry>
  <entry>
    <title>浅谈hook攻防</title>
    <link href="https://tttang.com/archive/1558/"/>
    <id>https://tttang.com/archive/1558/</id>
    <published>2022-04-28T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;攻与防都是相对的，只有掌握细节才能更好的对抗。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Kerberoasting攻击检测</title>
    <link href="https://tttang.com/archive/1555/"/>
    <id>https://tttang.com/archive/1555/</id>
    <published>2022-04-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;首先，我们来整体了解一下实际用户请求访问域内某个服务时会经过哪些步骤：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;mf&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;用户将AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REQ数据包发送给KDC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Distribution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Centre&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;密钥分发中心&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;此处为域控&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;），&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;进行身份认证&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KDC验证用户的凭据&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如果凭据有效&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;则返回TGT&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ticket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Granting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ticket&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;票据授予票据&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如果用户想通过身份认证&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;访问某个服务&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如CIFS&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;），&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;那么他需要发起&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ticket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Granting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;票据授予服务&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;请求&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;请求中包含TGT以及所请求服务的SPN&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;服务主体名称&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如果TGT有效并且没有过期&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TGS会创建用于目标服务的一个服务票据&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;服务票据使用服务账户的凭据进行加密&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;用户收到包含加密服务票据的TGS响应数据包&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;最后&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;服务票据会转发给目标服务&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;然后使用服务账户的凭据进行解密&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    </summary>
  </entry>
  <entry>
    <title>2022 未知之境 腾讯网络安全T-Star高校挑战赛 WriteUp</title>
    <link href="https://tttang.com/archive/1577/"/>
    <id>https://tttang.com/archive/1577/</id>
    <published>2022-04-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;说起来挺早就看到了这个比赛，后来比赛开始群友又在群里推了一下，不过第一天喵喵从早到晚上了一天课，深夜才来瞄了一下题目。&lt;/p&gt;
&lt;p&gt;总体而言整个题目有点像个剧情，类型偏向 Misc 和 Web，正好就合喵喵胃口了。由于有的题目脑洞有点大，再加上后面还有课以及其他事情，一般是半夜在看题，以至于想不通怎么做挺难受的睡不着，直到22号下午才把所有题目 AK，最后排名第17。&lt;/p&gt;
&lt;p&gt;唉，看了看榜首的 ha1c9on、Yoshino-s 等大师傅都挺熟悉了，他们第一天晚上就 AK 了 Orz，喵喵还是太菜了。&lt;/p&gt;
&lt;p&gt;那下面就来记录一下解题的过程吧，大部分边做边写的，可能包含一些误导性的内容，希望各位师傅不要在意。&lt;/p&gt;
    </summary>
  </entry>

</feed>
