<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-06-02T12:50:09+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">JNDI注入分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1611/"/>
    <id>https://tttang.com/archive/1611/</id>
    <published>2022-06-02T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;code&gt;JNDI(Java Naming and Directory Interface)&lt;/code&gt;是&lt;code&gt;Java&lt;/code&gt;提供的&lt;code&gt;Java&lt;/code&gt;命名和目录接口。通过调用&lt;code&gt;JNDI&lt;/code&gt;的&lt;code&gt;API&lt;/code&gt;可以定位资源和其他程序对象。&lt;br&gt;
&lt;code&gt;JNDI&lt;/code&gt;是&lt;code&gt;Java EE&lt;/code&gt;的重要部分，&lt;code&gt;JNDI&lt;/code&gt;可访问的现有的目录及服务有:&lt;code&gt;JDBC&lt;/code&gt;、&lt;code&gt;LDAP&lt;/code&gt;、&lt;code&gt;RMI&lt;/code&gt;、&lt;code&gt;DNS&lt;/code&gt;、&lt;code&gt;NIS&lt;/code&gt;、&lt;code&gt;CORBA&lt;/code&gt;。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Learning Linux kernel exploitation - Part 1 - Laying the groundwork（译文）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1606/"/>
    <id>https://tttang.com/archive/1606/</id>
    <published>2022-06-01T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文中，我们将以&lt;a href=&quot;https://2020.ctf.link/&quot; target=&quot;_blank&quot;&gt;hxp2020 CTF&lt;/a&gt;中的“kernel-rop”挑战题为基础，介绍如何利用驱动程序中的漏洞进行提权。我们知道，内核漏洞利用的主要目标，与用户空间的漏洞利用有很大不同，它不是直接生成一个shell，而是控制存在漏洞的内核代码以实现提权。至少在典型的CTF风格的场景中，生成shell都是后面的事情。有时，只要获得了任意读写原语，就足以渗出敏感信息，或覆盖与安全休戚相关的东西。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">浅谈Windows传统取证</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1608/"/>
    <id>https://tttang.com/archive/1608/</id>
    <published>2022-05-31T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在2021美亚杯对取证开始产生兴趣，断断续续的学习了一些浅显的取证技能。国内很多取证赛题也是伪取证，甚至用misc充数，正好这个学期有缘学习电子数据取证课程，平时接触最多的就是Windows传统取证，这里进行一点简单的分享。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">ETW的攻与防</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1612/"/>
    <id>https://tttang.com/archive/1612/</id>
    <published>2022-05-30T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;code&gt;ETW&lt;/code&gt;全称为&lt;code&gt;Event Tracing for Windows&lt;/code&gt;，即windows事件跟踪，它是Windows提供的原生的事件跟踪日志系统。由于采用内核层面的缓冲和日志记录机制，所以&lt;code&gt;ETW&lt;/code&gt;提供了一种非常高效的事件跟踪日志解决方案，本文基于&lt;code&gt;ETW&lt;/code&gt;探究其攻与防的实现&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">MQTT协议-车联网应用&amp;amp;&amp;amp;源码分析（一）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1609/"/>
    <id>https://tttang.com/archive/1609/</id>
    <published>2022-05-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;MQTT是基于TCP/IP协议栈构建的异步通信消息协议，是一种轻量级的发布、订阅信息传输协议。可在不可靠的网络环境中进行扩展，适用于设备硬件存储空间或网络带宽有限的场景。使用MQTT协议，消息发送者与接收者不受时间和空间的限制。基于发布/订阅模式的物联网通信协议，简单易实现、支持 QoS、报文小等特点，专门为网络受限设备、低宽带以及高延迟和不可靠的网络而设计。由于以上轻量级的特点，是实现智能家居的首选传输协议。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">CVE-2022-30781：一条普通的 Git 命令导致的 Gitea RCE</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1607/"/>
    <id>https://tttang.com/archive/1607/</id>
    <published>2022-05-26T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;今年年初的时候，我挖掘到了一枚 Gogs 中因为未对用户可控的目录路径进行检测，从而导致后续路径拼接可以导致目录穿越的漏洞（CVE-2022-0415）。&lt;br&gt;
攻击者能上传覆盖环境中的任意文件，在覆盖任意文件后，我使用的是之前 CVE-2019-11229 中提到的方法，覆盖一个 Git 仓库中 &lt;code&gt;.git/config&lt;/code&gt; 文件，设置 &lt;code&gt;core.sshCommand&lt;/code&gt; 参数从而达到远程任意命令执行。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Fastjson 反序列化分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1579/"/>
    <id>https://tttang.com/archive/1579/</id>
    <published>2022-05-25T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;学习Fastjson反序列化&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Exploiting a Use-After-Free for code execution in every version of Python 3[译文]</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1601/"/>
    <id>https://tttang.com/archive/1601/</id>
    <published>2022-05-24T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;不久前，我在浏览Python的&lt;a href=&quot;https://bugs.python.org/&quot; target=&quot;_blank&quot;&gt;bug追踪系统&lt;/a&gt;时，偶然发现了一个bug，具体描述为“&lt;a href=&quot;https://bugs.python.org/issue15994&quot; target=&quot;_blank&quot;&gt;memoryview to freed memory can cause segfault&lt;/a&gt;”。这个bug提交于2012年，最初出现在Python 2.7版本中；但直到今天，已经10年过去了，这个bug还没有得到修复。这激起了我的极大兴趣，所以，我决定仔细研究一下这个bug。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">fuzzer AFL 源码分析（一）- 编译</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1595/"/>
    <id>https://tttang.com/archive/1595/</id>
    <published>2022-05-23T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;学习经典的&lt;code&gt;fuzz&lt;/code&gt;框架&lt;code&gt;AFL&lt;/code&gt;，通过源码的阅读学习&lt;code&gt;fuzz&lt;/code&gt;，为以后针对特定目标进行模糊测试打下基础。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AFL&lt;/code&gt;的基础使用可以去看&lt;a href=&quot;https://f0cus7.github.io/2022/05/14/fuzz-%E9%80%9A%E8%BF%87afl-training%E5%AD%A6%E4%B9%A0afl/&quot; target=&quot;_blank&quot;&gt;通过afl-training学习afl&lt;/a&gt;，具体的使用不再进行说明。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">A new way to bypass __wakeup() and build POP chain</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1603/"/>
    <id>https://tttang.com/archive/1603/</id>
    <published>2022-05-20T12:00:00+08:00</published>
    <summary type="text">
      &lt;blockquote&gt;
&lt;p&gt;本文以 Laravel 9.1.8 为例，介绍一个通用的新思路，用以绕过 pop chain 构造过程中遇到的  &lt;code&gt;__wakeup()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Attack Surface Mining For AD CS</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1593/"/>
    <id>https://tttang.com/archive/1593/</id>
    <published>2022-05-19T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本篇文章大部分翻译并复现自 Will Schroeder（&lt;a href=&quot;https://twitter.com/harmj0y&quot; target=&quot;_blank&quot;&gt;@harmj0y&lt;/a&gt;）和 Lee Christensen（&lt;a href=&quot;https://twitter.com/tifkin_&quot; target=&quot;_blank&quot;&gt;@tifkin_&lt;/a&gt;） 在 2021 年的 BlackHat 大会上所发布的白皮书 &lt;a href=&quot;https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf&quot; target=&quot;_blank&quot;&gt;《Certified Pre-Owned - Abusing Active Directory Certificate Services》&lt;/a&gt;，其中详细介绍了关于 Active Directory Certificate Services 的滥用方法，关于 Active Directory 证书服务的攻击方法第一次系统性的进入我们的视野。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">windows环境下的自保护探究</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1584/"/>
    <id>https://tttang.com/archive/1584/</id>
    <published>2022-05-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;我们要想在32位下实现进程保护很简单，通过SSDT hook重写函数即可实现，但是在64位系统下因为引入了&lt;code&gt;PG&lt;/code&gt;和&lt;code&gt;DSE&lt;/code&gt;的原因，导致&lt;code&gt;SSDT hook&lt;/code&gt;实现起来处处受限。但微软同样为了系统安全，增加了一个对象回调函数的接口，利用该回调可以实现对对象请求的过滤保护自身的进程，目前大部分64位下的安全软件保护机制都是基于该方法，我们深入进行探究&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">HOW DO YOU ACTUALLY FIND BUGS?（译文）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1597/"/>
    <id>https://tttang.com/archive/1597/</id>
    <published>2022-05-17T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文是根据具有12年从业经验的安全研究人员Mark Dowd在今年的OffensiveCon大会上面的主题演讲整理而成，主要讲解了他自己在挖掘软件漏洞方面的方法论。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Java安全之SnakeYaml反序列化分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1591/"/>
    <id>https://tttang.com/archive/1591/</id>
    <published>2022-05-16T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;snakeyaml包主要用来解析yaml格式的内容，yaml语言比普通的xml与properties等配置文件的可读性更高，像是Spring系列就支持yaml的配置文件，而SnakeYaml是一个完整的YAML1.1规范Processor，支持UTF-8/UTF-16，支持Java对象的序列化/反序列化，支持所有YAML定义的类型。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">浅析Shiro权限绕过</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1592/"/>
    <id>https://tttang.com/archive/1592/</id>
    <published>2022-05-13T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;简单总结一些Shiro的权限绕过。&lt;/p&gt;
    </summary>
  </entry>

</feed>
