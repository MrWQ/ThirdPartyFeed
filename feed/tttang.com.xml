<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link href="https://tttang.com/"/>
  <updated>2022-05-10T06:17:55+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title>Musl 程序分析和调试环境配置 &amp;amp;&amp;amp; 部分源码分析</title>
    <link href="https://tttang.com/archive/1582/"/>
    <id>https://tttang.com/archive/1582/</id>
    <published>2022-05-09T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这里探索了很多方式，勘误之前的启动方式实际上存在一些问题，这里终于探索到了最完备的musl 调试环境，这里特别感谢我的学弟gxh为勘误做出的贡献。&lt;br&gt;
算是musl 学习的正式终结。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>starCTF2022-Web详解</title>
    <link href="https://tttang.com/archive/1569/"/>
    <id>https://tttang.com/archive/1569/</id>
    <published>2022-05-07T12:00:00+08:00</published>
    <summary type="text">
      
    </summary>
  </entry>
  <entry>
    <title>针对解释性语言包管理器的供应链攻击研究</title>
    <link href="https://tttang.com/archive/1587/"/>
    <id>https://tttang.com/archive/1587/</id>
    <published>2022-05-06T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是一篇NDSS 2021年发表的&lt;a href=&quot;https://arxiv.org/pdf/2002.01139.pdf&quot; target=&quot;_blank&quot;&gt;论文&lt;/a&gt;，相关的代码也已经&lt;a href=&quot;https://github.com/osssanitizer/maloss&quot; target=&quot;_blank&quot;&gt;开源&lt;/a&gt;，应该是目前比较全面的研究第三源安全的论文，刚好最近也在做软件供应链安全相关的事情，趁着五一假期翻译了一下。很巧的是OpenSSF(SASL也是它们的项目之一)也在4月28号也发布了&lt;a href=&quot;https://openssf.org/blog/2022/04/28/introducing-package-analysis-scanning-open-source-packages-for-malicious-behavior/&quot; target=&quot;_blank&quot;&gt;一篇文章&lt;/a&gt;也在号召社区一同来做动态检测，也在&lt;a href=&quot;https://github.com/ossf/package-analysis&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;上开源了相关代码，OpenSSF目前开源的项目只做了安装和导入时候的动态检测，相对简单一些。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>通过嵌入x64汇编隐藏数据&amp;amp;反调试</title>
    <link href="https://tttang.com/archive/1559/"/>
    <id>https://tttang.com/archive/1559/</id>
    <published>2022-05-05T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;我们知道在x64里面，从3环进入0环会调用&lt;code&gt;syscall&lt;/code&gt;，那么如果是32位的程序就需要首先转换为x64模式再通过&lt;code&gt;syscall&lt;/code&gt;进入0环，这里就会涉及到一系列64位寄存器的操作，我们通过探究其实现原理来达到隐藏数据和反调试的效果。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>GO逆向分析小结-goparse使用与深入理解interface</title>
    <link href="https://tttang.com/archive/1574/"/>
    <id>https://tttang.com/archive/1574/</id>
    <published>2022-04-29T12:00:00+08:00</published>
    <summary type="text">
      
    </summary>
  </entry>
  <entry>
    <title>浅谈hook攻防</title>
    <link href="https://tttang.com/archive/1558/"/>
    <id>https://tttang.com/archive/1558/</id>
    <published>2022-04-28T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;攻与防都是相对的，只有掌握细节才能更好的对抗。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Kerberoasting攻击检测</title>
    <link href="https://tttang.com/archive/1555/"/>
    <id>https://tttang.com/archive/1555/</id>
    <published>2022-04-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;首先，我们来整体了解一下实际用户请求访问域内某个服务时会经过哪些步骤：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;mf&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;用户将AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REQ数据包发送给KDC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Distribution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Centre&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;密钥分发中心&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;此处为域控&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;），&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;进行身份认证&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KDC验证用户的凭据&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如果凭据有效&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;则返回TGT&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ticket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Granting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ticket&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;票据授予票据&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如果用户想通过身份认证&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;访问某个服务&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如CIFS&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;），&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;那么他需要发起&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ticket&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Granting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;票据授予服务&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;请求&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;请求中包含TGT以及所请求服务的SPN&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;服务主体名称&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;如果TGT有效并且没有过期&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TGS会创建用于目标服务的一个服务票据&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;服务票据使用服务账户的凭据进行加密&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;用户收到包含加密服务票据的TGS响应数据包&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;最后&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;服务票据会转发给目标服务&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;然后使用服务账户的凭据进行解密&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    </summary>
  </entry>
  <entry>
    <title>2022 未知之境 腾讯网络安全T-Star高校挑战赛 WriteUp</title>
    <link href="https://tttang.com/archive/1577/"/>
    <id>https://tttang.com/archive/1577/</id>
    <published>2022-04-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;说起来挺早就看到了这个比赛，后来比赛开始群友又在群里推了一下，不过第一天喵喵从早到晚上了一天课，深夜才来瞄了一下题目。&lt;/p&gt;
&lt;p&gt;总体而言整个题目有点像个剧情，类型偏向 Misc 和 Web，正好就合喵喵胃口了。由于有的题目脑洞有点大，再加上后面还有课以及其他事情，一般是半夜在看题，以至于想不通怎么做挺难受的睡不着，直到22号下午才把所有题目 AK，最后排名第17。&lt;/p&gt;
&lt;p&gt;唉，看了看榜首的 ha1c9on、Yoshino-s 等大师傅都挺熟悉了，他们第一天晚上就 AK 了 Orz，喵喵还是太菜了。&lt;/p&gt;
&lt;p&gt;那下面就来记录一下解题的过程吧，大部分边做边写的，可能包含一些误导性的内容，希望各位师傅不要在意。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>滥用具备RWX-S权限且有签名的dll进行无感知的shellcode注入</title>
    <link href="https://tttang.com/archive/1565/"/>
    <id>https://tttang.com/archive/1565/</id>
    <published>2022-04-26T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;常规的shellcode注入一般是通过&lt;code&gt;VirtualAllocEx&lt;/code&gt;,&lt;code&gt;WriteProcessMemory&lt;/code&gt; 和 &lt;code&gt;CreateRemoteThread&lt;/code&gt; 来实现的，但是这种方式是被安全软件重点监控的，同时微软提供的ETW接口也是可以轻易检测出上述方式进行代码注入的痕迹。本文的核心是讲解怎么利用具备 RWX-S 权限且自身有签名的白DLL进行一种比较隐蔽的shellcode注入，&lt;br&gt;
并讲解具体的代码实现以及在写代码实现的过程中遇到的坑。本方法是由文章提出的：&lt;a href=&quot;https://billdemirkapi.me/sharing-is-caring-abusing-shared-sections-for-code-injection/&quot; target=&quot;_blank&quot;&gt;https://billdemirkapi.me/sharing-is-caring-abusing-shared-sections-for-code-injection/&lt;/a&gt; ，详情可以参考此文章。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>CodeQL能找到log4shell(CVE-2021-44228)漏洞吗？</title>
    <link href="https://tttang.com/archive/1570/"/>
    <id>https://tttang.com/archive/1570/</id>
    <published>2022-04-25T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文将回答下面几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CodeQL能否找到log4shell这个漏洞&lt;/li&gt;
&lt;li&gt;如何基于log4j-api-2.14.1.jar和log4j-core-2.14.1.jar创建CodeQL database&lt;/li&gt;
&lt;li&gt;如何基于CodeQL进行调用图分析&lt;/li&gt;
&lt;li&gt;CodeQL如何解析虚拟函数调用&lt;/li&gt;
&lt;li&gt;如何对CodeQL的污点分析进行debug&lt;/li&gt;
&lt;/ol&gt;
    </summary>
  </entry>
  <entry>
    <title>内网渗透 -- NTLM 反射分析及土豆家族</title>
    <link href="https://tttang.com/archive/1560/"/>
    <id>https://tttang.com/archive/1560/</id>
    <published>2022-04-24T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内网渗透 -- NTLM 反射分析及土豆家族&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#前置知识点&quot; target=&quot;_blank&quot;&gt;前置知识点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#windows-sspsspi&quot; target=&quot;_blank&quot;&gt;Windows SSP&amp;amp;SSPI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sspi和ssp如何工作&quot; target=&quot;_blank&quot;&gt;SSPI和SSP如何工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ntlm-ssp-原理ntlm-身份验证协议&quot; target=&quot;_blank&quot;&gt;NTLM SSP 原理(NTLM 身份验证协议)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#integration-with-smb&quot; target=&quot;_blank&quot;&gt;Integration with SMB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lmcompatibilitylevel&quot; target=&quot;_blank&quot;&gt;LmCompatibilityLevel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#signing&quot; target=&quot;_blank&quot;&gt;Signing&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ldap-签名&quot; target=&quot;_blank&quot;&gt;LDAP 签名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#negotiation&quot; target=&quot;_blank&quot;&gt;Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#土豆家族分析&quot; target=&quot;_blank&quot;&gt;土豆家族分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#原理讲解&quot; target=&quot;_blank&quot;&gt;原理讲解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#如何利用&quot; target=&quot;_blank&quot;&gt;如何利用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#历史土豆分析&quot; target=&quot;_blank&quot;&gt;历史土豆分析&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#origin-potato_ms08-068-土豆始祖漏洞&quot; target=&quot;_blank&quot;&gt;Origin Potato_MS08-068 (土豆始祖漏洞)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ms16-075_hot-potato-ms08-068的变种&quot; target=&quot;_blank&quot;&gt;MS16-075_HOT Potato (MS08-068的变种)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rotten-potato-ms16-075的变种&quot; target=&quot;_blank&quot;&gt;Rotten Potato (MS16-075的变种)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#juicy-potato-ms16-075的变种&quot; target=&quot;_blank&quot;&gt;Juicy Potato (MS16-075的变种)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sweet-potato_juicy-potato衍生版本&quot; target=&quot;_blank&quot;&gt;Sweet Potato_Juicy Potato衍生版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#printspoofer&quot; target=&quot;_blank&quot;&gt;PrintSpoofer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#roguepotato&quot; target=&quot;_blank&quot;&gt;RoguePotato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cve-2019-1384_ghost-potato&quot; target=&quot;_blank&quot;&gt;CVE-2019-1384_Ghost potato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参考&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    </summary>
  </entry>
  <entry>
    <title>PE文件结构从初识到简单shellcode注入</title>
    <link href="https://tttang.com/archive/1553/"/>
    <id>https://tttang.com/archive/1553/</id>
    <published>2022-04-22T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;将自己学习的PE文件结构进行总结形成文章这件事情，一直躺在我的Notion TodoList里，但是一直是未完成的状态哈哈，拖了那么久也该让它状态变成已完成了。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>The More You Know, The More You Know You Don’t Know: A Year in Review of 0-days Used In-the-Wild in 2021（译文）</title>
    <link href="https://tttang.com/archive/1568/"/>
    <id>https://tttang.com/archive/1568/</id>
    <published>2022-04-22T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是我们第三次对在野利用的0-day漏洞进行年度回顾[2020年，2019年]。每年，我们都对所有已检测到并公之于众的在野0-day漏洞进行回顾，并总结我们认为的趋势和收获。这份报告的宗旨，并非详细说明各个漏洞，而是把当年的漏洞作为整体进行分析，寻找趋势、差距、经验教训、成功案例等。如果您对单个漏洞的分析感兴趣的话，可以访问我们的根本原因分析库。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Postgresql 渗透总结</title>
    <link href="https://tttang.com/archive/1547/"/>
    <id>https://tttang.com/archive/1547/</id>
    <published>2022-04-21T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;Postgresql 数据库作为 python 应用中比较常见的数据库，其利用手段公开的不多,而且利用方式也比较单一，我搜集了国内外一些相关的利用思路进行总结，如有遗漏还请指正。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title>Exploit Development: Browser Exploitation on Windows - CVE-2019-0567, A Microsoft Edge Type Confusion Vulnerability (Part 2) （译文）</title>
    <link href="https://tttang.com/archive/1557/"/>
    <id>https://tttang.com/archive/1557/</id>
    <published>2022-04-20T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在第一篇文章中，我们介绍了ChakraCore exploit的开发环境，考察了JavaScript（更具体地说，Chakra/ChakraCore引擎）是如何管理内存中的动态对象的，并分析了CVE-2019-0567漏洞——它是一个影响基于Chakra引擎的Microsoft Edge和ChakraCore的类型混淆漏洞。在本文中，我们将为读者介绍该漏洞的概念验证脚本，该脚本能够利用类型混淆漏洞让Edge和ChakraCore发生崩溃，进而将其转换为一个读/写原语。然后，该原语将被用来获得针对ChakraCore和ChakraCore shell（ch.exe）的代码执行，而ChakraCore shell本质上就是一个允许执行JavaScript代码的命令行JavaScript shell。就本文来说，我们可以把ch.exe看作是Microsoft Edge，但没有提供可视化功能。接下来，在第三篇文章中，我们将把这里介绍的exploit移植到Microsoft Edge上，以获得完整的代码执行。&lt;/p&gt;
    </summary>
  </entry>

</feed>
