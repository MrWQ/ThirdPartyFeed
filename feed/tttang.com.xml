<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-11-04T06:16:10+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">Weblogic Analysis Attacked by T3 Protocol From CVE (part 3)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1800/"/>
    <id>https://tttang.com/archive/1800/</id>
    <published>2022-11-03T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;继续抽空学习Weblogic CVE中有关T3协议的漏洞利用方式！&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">fuzzer AFL 源码分析（五）-变异</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1796/"/>
    <id>https://tttang.com/archive/1796/</id>
    <published>2022-11-02T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;前面几篇文章将&lt;code&gt;afl&lt;/code&gt;的大部分内容都已经覆盖到了（编译、反馈到监控），最后一个部分主要讲&lt;code&gt;afl&lt;/code&gt;是如何挑选样本并针对样本的数据进行变异的。通过之前的分析我们已经知道，编译的种子通过链表的形式形成种子队列，种子经过变异后如果能够触发目标程序新的行为，会作为新的种子队列存入到链表中。但是对于新一轮的模糊测试，挑选哪个种子进行变异以及如何变异尚未解决，本文主要阐述&lt;code&gt;afl&lt;/code&gt;是如何挑选种子进行变异以及如何变异。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Play With Windows Defender -- ASR篇</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1798/"/>
    <id>https://tttang.com/archive/1798/</id>
    <published>2022-11-01T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;终端对抗一直是红队研究的重点内容，本文主要通过前面已有的研究来解开Windows Defender的ASR规则的神秘面纱，由于国内可供参考资料很有限，多以国外会议和议题参考为主&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022蓝帽杯遇见的 SUID 提权 总结篇</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1793/"/>
    <id>https://tttang.com/archive/1793/</id>
    <published>2022-10-31T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;code&gt;SUID&lt;/code&gt;提权是前阵子在蓝帽杯中刚接触到的一个点，本来以为是挺鸡肋的一个点，但是前两天接触了一台真实使用的服务器（类似于上机排查取证）。发现竟然有很多可以利用的点，印象深刻的就是当时机子里有个&lt;code&gt;vim-basic&lt;/code&gt;，甚至好像还有个&lt;code&gt;find&lt;/code&gt;留着。这些都可能利用&lt;code&gt;suid&lt;/code&gt;的特殊权限实现突破。于是重新学习一下。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Zoho Password Manager Pro 后利用技巧</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1791/"/>
    <id>https://tttang.com/archive/1791/</id>
    <published>2022-10-28T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;学习zoho pmp这块相关知识点，简单做个总结&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">PHP-FPM攻击详解</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1775/"/>
    <id>https://tttang.com/archive/1775/</id>
    <published>2022-10-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;最近参加了浙江省信息安全竞赛，遇到了一道攻击fastcgi的题目，发现自己对php-fpm不够了解，于是做了一个归纳总结。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text"># CobaltStrike beacon二开指南</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1789/"/>
    <id>https://tttang.com/archive/1789/</id>
    <published>2022-10-26T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;CobaltStrike真好用啊，但是缺点就是太好用了被各类安全厂商严防死守，研究了半天shellcode loader和白加黑之类的免杀，多多少少都有翻车的记录，有没有更好的办法呢？&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Cobalt Strike BOF原理分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1786/"/>
    <id>https://tttang.com/archive/1786/</id>
    <published>2022-10-25T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;BOF(Beacon 对象文件)是C/C++编译，但未链接产生的Obj文件，BOF运行在Beacon进程中，并执行内部的Beacon API和Win32 API函数。BOF本质是COFF Obj文件，其符合COFF文件格式规范，结构类似于windows PE文件格式。在被Cobalt Strike加载和使用过程中，BOF是一段地址无关的Shellcode，BOF本身体积比较小，在传输过程中，适用于那些传输带宽小的模式，然后其本身运行在beacon进程内部，不会重新创建进程，也可以有效规避EDR。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Weblogic Analysis Attacked by T3 Protocol From CVE (part 2)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1785/"/>
    <id>https://tttang.com/archive/1785/</id>
    <published>2022-10-24T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这篇是继上篇中的T3协议进行漏洞利用，继续分析Weblogic CVE的有关利用方式和修复手法&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Python pickle反序列化浅析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1782/"/>
    <id>https://tttang.com/archive/1782/</id>
    <published>2022-10-21T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;之前所接触的大多是PHP 反序列化题型，最近遇见了一道Python pickle反序列化类型题，因此学习了一下其反序列化，简单总结如下，希望能对各位师傅有所帮助。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">ATT&amp;amp;CK中的攻与防——T1218</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1781/"/>
    <id>https://tttang.com/archive/1781/</id>
    <published>2022-10-20T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;此篇文章为ATTCK矩阵中的攻与防的第二篇，T1218是windows里面常见的规避EDR常用的渗透横向技巧，大部分技巧在互联网上都有师傅们分享，笔者只是将其中的内容总结起来，以ATT&amp;amp;CK矩阵来探究其中的攻防之道，regsvr32和rundll32曾在知识星球分享过，看过的师傅们看前面的即可，如若文章有技术问题，欢迎各位师傅在评论区交流&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">内联缓存机制浅析与由此而来的类型混淆利用原理</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1772/"/>
    <id>https://tttang.com/archive/1772/</id>
    <published>2022-10-19T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;今年六月份见到了 CVE-2022-1134 ，这是 V8 在 Turbofan 中另一个很有意思的攻击面，提交者在这之后很详细的介绍了这个漏洞的利用方式，它的利用方法同之前的 Turbofan 有着很不一样，但却相当有意思的地方。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">On Bypassing eBPF Security Monitoring（译文）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1779/"/>
    <id>https://tttang.com/archive/1779/</id>
    <published>2022-10-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;Extended Berkeley Packet Filter（eBPF）是一种内核技术（从 Linux 4.x 开始），它允许程序在无需更改内核源代码，或添加额外模块的情况下运行。你可以将其视为 Linux 内核中的轻量级沙箱虚拟机（VM），程序员可以在其中运行 BPF 字节码，从而利用特定的内核资源，近几年&lt;code&gt;eBPF&lt;/code&gt;的发展越来越火热，对应的，他的安全问题也是一项不可忽视的关注点&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">浅析路由器WEB服务架构（二）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1777/"/>
    <id>https://tttang.com/archive/1777/</id>
    <published>2022-10-17T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这次的分析接着上次的来讲，也是分析了两个中间件的通信模型，分别是非主流中间件被厂商魔改后的中间件➕CGI和OpenWrt中间模块uhttpd/lighttpd➕CGI/Lua，话不多说，直接开始...&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">从TCTF的3rm1学习java动态代理</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1769/"/>
    <id>https://tttang.com/archive/1769/</id>
    <published>2022-10-14T12:00:00+08:00</published>
    <summary type="text">
      &lt;blockquote&gt;
&lt;p&gt;代理模式是常用的 java 设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。&lt;/p&gt;
&lt;/blockquote&gt;
    </summary>
  </entry>

</feed>
