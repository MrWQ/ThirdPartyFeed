<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-09-26T13:34:27+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">fuzzer AFL 源码分析（三）-反馈</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1707/"/>
    <id>https://tttang.com/archive/1707/</id>
    <published>2022-09-26T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;上一部分对&lt;code&gt;afl-fuzz&lt;/code&gt;的总流程进行了概要性的阐述，接下来将会对关键的代码模块进行详细的分析。&lt;/p&gt;
&lt;p&gt;先对&lt;code&gt;afl-fuzz&lt;/code&gt;过程中反馈与监控机制的实现进行分析，反馈是指&lt;code&gt;afl&lt;/code&gt;在对目标程序的模糊测试过程中，目标程序可以将本次运行过程中的状态反馈给&lt;code&gt;afl&lt;/code&gt;。本文主要介绍该&lt;code&gt;afl&lt;/code&gt;是如何具体实现分支信息的记录以及更高效的运行目标程序的。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Dubbo反序列化漏洞分析集合2</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1747/"/>
    <id>https://tttang.com/archive/1747/</id>
    <published>2022-09-23T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这篇是对&lt;a href=&quot;https://tttang.com/archive/1730/&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;进行了补充，添加了两个Hessian协议的分析和Kryo&amp;lt;5.0.0的利用和MRCTF中的Kryo&amp;gt;5.0.0特定场景利用。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">PPL利用</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1743/"/>
    <id>https://tttang.com/archive/1743/</id>
    <published>2022-09-22T12:00:00+08:00</published>
    <summary type="text">
      &lt;blockquote&gt;
&lt;p&gt;PPL表示“受保护的流程”，但在此之前，只有“受保护的流程”。Windows Vista / Server 2008引入了受保护进程的概念，其目的不是保护您的数据或凭据。其最初目标是保护媒体内容并符合DRM（数字版权管理）要求。Microsoft开发了此机制，以便您的媒体播放器可以读取例如蓝光，同时防止您复制其内容。当时的要求是映像文件（即可执行文件）必须使用特殊的Windows Media证书进行数字签名（如Windows Internals的“受保护的过程”部分所述）。&lt;/p&gt;
&lt;/blockquote&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">ASP.NET 无文件攻击入侵检测</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1744/"/>
    <id>https://tttang.com/archive/1744/</id>
    <published>2022-09-21T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;前一段时间某管理系统被黑客批量植入冰蝎并进行勒索，引发了本人对于ASP.NET无文件攻击检测的思考。搜了一下目前还没有相关的文章，就自己研究了一下。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">零基础要如何破除 IO_FILE 利用原理的迷雾</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1742/"/>
    <id>https://tttang.com/archive/1742/</id>
    <published>2022-09-20T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;好久以前，在我完成 Glibc2.23 的基本堆利用学习以后，IO_FILE 的利用就被提上日程了，但苦于各种各样的麻烦因素，时至今日，我才终于动笔开始学习这种利用技巧，实属惭愧。&lt;/p&gt;
&lt;p&gt;近几年，由于堆利用的条件越来越苛刻，加之几个常用的劫持 hook 被删除，IO 的地位逐渐有超过堆利用的趋势，因此为了跟上这几年的新潮，赶紧回来学习一下 IO 流的利用技巧。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">MacOS 水坑攻击组合拳分析复现</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1745/"/>
    <id>https://tttang.com/archive/1745/</id>
    <published>2022-09-19T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;去年11月Google TAG发布了一篇[1]针对MacOS的水坑攻击调查报告，在红队的攻击几乎都以windows下的压缩包投毒为主的当下 能有一起针对Mac如此精良的攻击值得好好复盘分析。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">java免杀合集</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1739/"/>
    <id>https://tttang.com/archive/1739/</id>
    <published>2022-09-16T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;各种方式制作java免杀马。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Go AST 浅析与CTF中的实战运用</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1736/"/>
    <id>https://tttang.com/archive/1736/</id>
    <published>2022-09-15T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在前段时间的网鼎杯某赛道中遇到了一个题，通过混淆的go源码分析各类函数调用、定义信息。但由于题目本身要求获得的信息过于简单，有不少人直接暴力搜索来解决。但当我们遇到更为复杂，更为巨大的混淆代码时，IDE所提供的简单分析功能也就无能为力了。这也就是我写下这篇文章的原因。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">PHP Phar反序列化浅学习</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1732/"/>
    <id>https://tttang.com/archive/1732/</id>
    <published>2022-09-14T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;Phar反序列化是PHP反序列化的一个重要部分，进行相关学习后，简单总结如下，希望对正在学习的师傅有所帮助。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">OSCP tips and tricks（译文）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1734/"/>
    <id>https://tttang.com/archive/1734/</id>
    <published>2022-09-13T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文将为大家介绍如何搞定OSCP实验和考试！（100 + 10 / 100 分）&lt;br&gt;
这是本人通过OSCP实验和认证过程的小结。同时，我还决定添加一些可用于实战的技巧（适用于红队、渗透测试以及逆向分析等）。当然，本文提到的许多命令、工具和技巧，大多来自其他（与OSCP相关或不相关）在线指南，相关的链接可以在参考资料部分找到。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Dubbo反序列化漏洞分析集合1</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1730/"/>
    <id>https://tttang.com/archive/1730/</id>
    <published>2022-09-09T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;Apache Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用、智能容错和负载均衡、以及服务自动注册和发现。&lt;/p&gt;
&lt;p&gt;Dubbo RPC是Apache Dubbo体系中最核心的一种高性能、高吞吐量的远程调用方式，主要用于两个Dubbo系统之间远程调用。在Dubbo RPC中，支持多种序列化方式，如dubbo序列化、hessian2序列化、kryo序列化、json序列化、java序列化等等&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">原生反序列化链 jdk8u20 的新构造</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1729/"/>
    <id>https://tttang.com/archive/1729/</id>
    <published>2022-09-08T12:00:00+08:00</published>
    <summary type="text">
      &lt;blockquote&gt;
&lt;p&gt;自己构造 jdk8u20 反序列化链子，构造思路比网上的大多数都简单很多，exp也更短&lt;/p&gt;
&lt;p&gt;感觉我之前那个 bypass &lt;code&gt;__wakeup()&lt;/code&gt; 的 trick 和 8u20 绕过 7u21 的方式异曲同工&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jdk8u20 是对 jdk7u21 这条链的绕过&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">dpt-shell抽取壳项目源码及其逆向分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1728/"/>
    <id>https://tttang.com/archive/1728/</id>
    <published>2022-09-07T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;由于前段时间网鼎杯一道Android题目中用了这个，具有一定研究价值，便做一个壳的实现分析&lt;br&gt;
&lt;a href=&quot;https://github.com/luoyesiqiu/dpt-shell&quot; target=&quot;_blank&quot;&gt;https://github.com/luoyesiqiu/dpt-shell&lt;/a&gt;&lt;br&gt;
其实这个是一个假的抽取壳，虽然函数抽取壳确实是将dex文件中的函数代码给nop，然后在运行时再把字节码给填回，但是不会填回内存中原dex位置，是填回内存中的一个解析后的结构体，比如梆梆加固，普通的工具是dump不到dex的。&lt;br&gt;
虽然但是，能写出这个的也足以说明作者对Android的了解。即使作者也有howtowork文档去解释如何实现的，但是很多都被省略掉，这里做个源码分析，许多抽取壳也有类似的操作。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">codeql实践之查找house_of_kiwi利用点</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1727/"/>
    <id>https://tttang.com/archive/1727/</id>
    <published>2022-09-06T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;codeql是一款强大的静态扫描工具，通过codeql强大的自定义规则我们可以编写sql语句来搜索源码中我们可能感兴趣的代码。ctf中高版本libc的利用方法中很多都用利用了IO函数，即利用stdin/stdout/stderr-&amp;gt;vtable 修改虚表指针指向对我们有用的伪造的vtable又或者其他存在可利用函数的_IO_xxx_jumps虚表，如：house_of_kiwi,因此我便诞生了使用codeql查找libc中所有跳转到IO的函数调用的想法，更方便的分析libc中的利用点，也看看能不能找出house_of_kiwi中使用的malloc_assert-&amp;gt;fflush利用点。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">JAVA常用框架SQL注入审计</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1726/"/>
    <id>https://tttang.com/archive/1726/</id>
    <published>2022-09-05T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;总结常用Java框架SQL注入场景。&lt;/p&gt;
    </summary>
  </entry>

</feed>
