<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-08-21T18:18:56+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">从偶遇Flarum开始的RCE之旅</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1714/"/>
    <id>https://tttang.com/archive/1714/</id>
    <published>2022-08-19T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;一次日常测试中，偶然遇到了一个Flarum搭建的论坛，并获得了其管理员账号。本来到这里已经可以算完成了任务，将漏洞报给具体负责的人就结束了，但是既然已经拿到了管理员账号，何不尝试一下RCE呢？&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">CodeQL数据库构建原理分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1704/"/>
    <id>https://tttang.com/archive/1704/</id>
    <published>2022-08-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;a href=&quot;https://github.com/github/codeql&quot; target=&quot;_blank&quot;&gt;CodeQL&lt;/a&gt;是一个帮助开发者自动完成安全检查、帮助安全研究者进行变异分析的分析引擎。它由代码数据库和代码语义分析引擎组成，通过将代码抽象为数据查询表保存到代码数据库中，可以方便地运行代码查询。本文的关注点在于CodeQL是如何生成代码数据库。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">二次反序列化 看我一命通关</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1701/"/>
    <id>https://tttang.com/archive/1701/</id>
    <published>2022-08-17T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;不记得是哪一场比赛了，遇到了一个 Java 的题目，过滤了很多关键类，不管茯苓把 CC 链如何拆开组合，都没有办法绕过。&lt;/p&gt;
&lt;p&gt;就在此时，大佬看了一眼说，用二次反序列化就可以绕过了。“二次反序列化”这六个字重重地敲在了我的心巴上，从那以后我就对二次反序列化产生了莫名的渴望。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">XStream通览漏洞分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1699/"/>
    <id>https://tttang.com/archive/1699/</id>
    <published>2022-08-16T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;XStream是一个简单的基于Java库，Java对象序列化到XML，反之亦然(即：可以轻易的将Java对象和xml文档相互转换)。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">FLask SSTI从零到入门</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1698/"/>
    <id>https://tttang.com/archive/1698/</id>
    <published>2022-08-15T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;SSTI也是一个比较常见的注入，在学习过后，进行简单总结，希望能对正在学习SSTI的师傅有所帮助。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">A Magic Way of XSS in HTTP/2</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1703/"/>
    <id>https://tttang.com/archive/1703/</id>
    <published>2022-08-12T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;上周周末结束的 corCTF 中有一个题目提出了一种很有意思的攻击，该攻击方式可以利用 HTTP/2 Server Push 机制 XSS 到其他域，尽管利用条件有点苛刻，但是我个人非常喜欢这种 Magic 的攻击方式。（在征求了原作者 &lt;a href=&quot;https://larry.sh/&quot; target=&quot;_blank&quot;&gt;@ehhthing&lt;/a&gt; 同意下将该方法分享给大家）&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">The Poor Man&amp;#x27;s Obfuscator</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1697/"/>
    <id>https://tttang.com/archive/1697/</id>
    <published>2022-08-11T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;影响或阻碍 IDA、BinaryNinja、Ghidra 和 Radare2 等反汇编工具的 ELF 或 Mach-O 修改。&lt;/p&gt;
&lt;p&gt;不会修改汇编代码或二进制数据。重点是修改可执行文件格式的一些结构，比如节区和符号。&lt;/p&gt;
&lt;p&gt;所有修改均基于LIEF，一个用于解析和修改可执行文件格式的库。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">tabby原理分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1696/"/>
    <id>https://tttang.com/archive/1696/</id>
    <published>2022-08-10T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;a href=&quot;https://github.com/wh1t3p1g/tabby&quot; target=&quot;_blank&quot;&gt;tabby&lt;/a&gt;是一款基于&lt;a href=&quot;https://github.com/soot-oss/soot&quot; target=&quot;_blank&quot;&gt;soot&lt;/a&gt;实现的java静态代码分析工具，用于分析jar包，生成代码属性图。结合手工可以半自动地完成java反序列化链挖掘工作。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">WMI调试与检测</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1640/"/>
    <id>https://tttang.com/archive/1640/</id>
    <published>2022-08-09T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;这是WMI的第三篇文章，本文主要调式分析WMI消费者的工作原理，进而提出WMI的检测思路。本文首先介绍了本次分析所需要了解的WMI基本组件和底层协议(RPC),然后通过调式网上的RPC客户端和服务端的通信，了解RPC的原理，接着通过分析两个典型的WMI利用(查询数据，执行函数)，了解WMI的检测，由于WMI调试相关资料过少，没有进行自我订正，可能存在错误，或者重大错误，希望有了解的大佬积极斧正。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">PowerPC PWN从入门到实践</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1695/"/>
    <id>https://tttang.com/archive/1695/</id>
    <published>2022-08-08T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;前段时间2022虎符决赛结束，赛后从学长那看到了题目，其中出现了一道PowerPC64架构的pwn题，从架构方面来说比较少见，刚好之前看过一道PowerPC架构32位栈溢出的题目，于是放到一起整理一下。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">CVE-2022-34918 netfilter nf_tables 本地提权分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1693/"/>
    <id>https://tttang.com/archive/1693/</id>
    <published>2022-08-05T12:00:00+08:00</published>
    <summary type="text">
      &lt;h2 id=&quot;toc_&quot;&gt;&lt;a href=&quot;#toc_&quot;&gt;影响范围&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引入commit：&lt;a href=&quot;https://github.com/torvalds/linux/commit/fdb9c405e35bdc6e305b9b4e20ebc141ed14fc81&quot; target=&quot;_blank&quot;&gt;fdb9c405e35bdc6e305b9b4e20ebc141ed14fc81&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复commit：&lt;a href=&quot;https://github.com/torvalds/linux/commit/7e6bc1f6cabcd30aba0b11219d8e01b952eacbb6&quot; target=&quot;_blank&quot;&gt;7e6bc1f6cabcd30aba0b11219d8e01b952eacbb6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;时间跨度：2020/04/28 ~ 2022/07/03&lt;/li&gt;
&lt;li&gt;版本跨度：v5.8 ~ v5.19&lt;/li&gt;
&lt;/ul&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022UIUCTF-Spoink(Pebble最新模板注入)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1692/"/>
    <id>https://tttang.com/archive/1692/</id>
    <published>2022-08-04T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;之前周末忙着强网杯，对这道题只做了一半就搁置下来了，最后卡在绕过最新pebble模板引擎RCE那里，今天抽空来继续进行剩下的分析，正好题目里有几个在现实场景当中能用的trick顺便也分享了&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">探索Windows内核系列——句柄，利用句柄进行进程保护</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1682/"/>
    <id>https://tttang.com/archive/1682/</id>
    <published>2022-08-03T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在本文中，我们会探索句柄在windows内核中表现形式，帮助了解句柄在windows中的作用。通过调试与逆向内核代码的方式，介绍句柄是如何关联到内核对象，并在此基础上介绍一种利用句柄来保护我们的进程不被读写的技术方案。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">浅析Vmess流量与强网杯2022谍影重重</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1687/"/>
    <id>https://tttang.com/archive/1687/</id>
    <published>2022-08-02T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在密码学中，Message Authentication Code(消息认证码，有时也被称为tag)是用来认证消息的比较短的信息。换言之，MAC用来保证消息的&lt;strong&gt;数据完整性&lt;/strong&gt;和&lt;strong&gt;消息的数据源&lt;/strong&gt;认证。&lt;/p&gt;
&lt;p&gt;MAC由消息本身和一个密钥经过一系列计算产生，用于生成MAC的算法，称为MAC算法。MAC算法应能满足如下几个条件:&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">GadgetInspector原理分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1683/"/>
    <id>https://tttang.com/archive/1683/</id>
    <published>2022-07-29T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;a href=&quot;https://github.com/JackOfMostTrades/gadgetinspector&quot; target=&quot;_blank&quot;&gt;GadgetInspector&lt;/a&gt;是&lt;a href=&quot;https://github.com/JackOfMostTrades&quot; target=&quot;_blank&quot;&gt;JackOfMostTrades&lt;/a&gt;在&lt;a href=&quot;https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf&quot; target=&quot;_blank&quot;&gt;2018 BLACKHAT USA&lt;/a&gt;上发布的一个自动化反序列化链挖掘工具，它通过对字节码形式的JAVA项目进行污点分析，挖掘可能存在的反序列化链。&lt;/p&gt;
    </summary>
  </entry>

</feed>
