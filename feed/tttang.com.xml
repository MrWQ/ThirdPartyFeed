<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">跳跳糖 - 安全与分享社区</title>
  <link href="https://raw.githubusercontent.com/p7e4/ThirdPartyFeed/main/feed/tttang.com.xml" rel="self"/>
  <link rel="alternate" href="https://tttang.com/"/>
  <updated>2022-08-07T12:25:35+08:00</updated>
  <id>https://tttang.com/</id>
  <entry>
    <title type="text">CVE-2022-34918 netfilter nf_tables 本地提权分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1693/"/>
    <id>https://tttang.com/archive/1693/</id>
    <published>2022-08-05T12:00:00+08:00</published>
    <summary type="text">
      &lt;h2 id=&quot;toc_&quot;&gt;&lt;a href=&quot;#toc_&quot;&gt;影响范围&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引入commit：&lt;a href=&quot;https://github.com/torvalds/linux/commit/fdb9c405e35bdc6e305b9b4e20ebc141ed14fc81&quot; target=&quot;_blank&quot;&gt;fdb9c405e35bdc6e305b9b4e20ebc141ed14fc81&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修复commit：&lt;a href=&quot;https://github.com/torvalds/linux/commit/7e6bc1f6cabcd30aba0b11219d8e01b952eacbb6&quot; target=&quot;_blank&quot;&gt;7e6bc1f6cabcd30aba0b11219d8e01b952eacbb6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;时间跨度：2020/04/28 ~ 2022/07/03&lt;/li&gt;
&lt;li&gt;版本跨度：v5.8 ~ v5.19&lt;/li&gt;
&lt;/ul&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">2022UIUCTF-Spoink(Pebble最新模板注入)</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1692/"/>
    <id>https://tttang.com/archive/1692/</id>
    <published>2022-08-04T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;之前周末忙着强网杯，对这道题只做了一半就搁置下来了，最后卡在绕过最新pebble模板引擎RCE那里，今天抽空来继续进行剩下的分析，正好题目里有几个在现实场景当中能用的trick顺便也分享了&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">探索Windows内核系列——句柄，利用句柄进行进程保护</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1682/"/>
    <id>https://tttang.com/archive/1682/</id>
    <published>2022-08-03T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在本文中，我们会探索句柄在windows内核中表现形式，帮助了解句柄在windows中的作用。通过调试与逆向内核代码的方式，介绍句柄是如何关联到内核对象，并在此基础上介绍一种利用句柄来保护我们的进程不被读写的技术方案。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">浅析Vmess流量与强网杯2022谍影重重</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1687/"/>
    <id>https://tttang.com/archive/1687/</id>
    <published>2022-08-02T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在密码学中，Message Authentication Code(消息认证码，有时也被称为tag)是用来认证消息的比较短的信息。换言之，MAC用来保证消息的&lt;strong&gt;数据完整性&lt;/strong&gt;和&lt;strong&gt;消息的数据源&lt;/strong&gt;认证。&lt;/p&gt;
&lt;p&gt;MAC由消息本身和一个密钥经过一系列计算产生，用于生成MAC的算法，称为MAC算法。MAC算法应能满足如下几个条件:&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">GadgetInspector原理分析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1683/"/>
    <id>https://tttang.com/archive/1683/</id>
    <published>2022-07-29T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;&lt;a href=&quot;https://github.com/JackOfMostTrades/gadgetinspector&quot; target=&quot;_blank&quot;&gt;GadgetInspector&lt;/a&gt;是&lt;a href=&quot;https://github.com/JackOfMostTrades&quot; target=&quot;_blank&quot;&gt;JackOfMostTrades&lt;/a&gt;在&lt;a href=&quot;https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf&quot; target=&quot;_blank&quot;&gt;2018 BLACKHAT USA&lt;/a&gt;上发布的一个自动化反序列化链挖掘工具，它通过对字节码形式的JAVA项目进行污点分析，挖掘可能存在的反序列化链。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">windows内存管理详解</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1590/"/>
    <id>https://tttang.com/archive/1590/</id>
    <published>2022-07-28T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;只有我们知道了windows如何管理内存空间，才能够得心应手的进行对抗，所以了解windows内存管理是很有必要的。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">基于python的RPC Fuzz寻找可提权函数</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1678/"/>
    <id>https://tttang.com/archive/1678/</id>
    <published>2022-07-27T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;本文主要涉及有SeImpersonatePrivilege时通过pipe管道复制客户端权限的rpc提权漏洞挖掘。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">pem类文件解析及2022蓝帽杯crypto详解</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1670/"/>
    <id>https://tttang.com/archive/1670/</id>
    <published>2022-07-26T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;pem格式的文件通常用于数字证书认证机构(Certificate Authorities，CA)，其文件形式主要为&lt;strong&gt;base64编码&lt;/strong&gt;的文件，头尾有类似于&lt;code&gt;-----BEGIN PUBLIC KEY-----&lt;/code&gt;和&lt;code&gt;-----END PUBLIC KEY-----&lt;/code&gt;的头尾标记。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">CVE–2019–8985 Netis WF2411 RCE 详细解析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1672/"/>
    <id>https://tttang.com/archive/1672/</id>
    <published>2022-07-25T12:00:00+08:00</published>
    <summary type="text">
      &lt;blockquote&gt;
&lt;p&gt;我的github上传了固件和代码：&lt;a href=&quot;https://github.com/Ler2sq/CVE-2019-8985&quot; target=&quot;_blank&quot;&gt;Ler2sq/CVE-2019-8985: CVE–2019–8985 Netis WF2411 RCE (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NVD官方介绍：&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2019-8985&quot; target=&quot;_blank&quot;&gt;NVD - CVE-2019-8985 (nist.gov)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;固件获取： &lt;a href=&quot;https://www.netis-systems.com/Suppory/de_details/id/1/de/168.html&quot; target=&quot;_blank&quot;&gt;WF2419&lt;/a&gt; 选择WF2419（2.2.36123）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据报告者和PoC &lt;a href=&quot;https://github.com/WhooAmii/iot/blob/master/netis&quot; target=&quot;_blank&quot;&gt;WhooAmii&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以知道这是一个路由器内的缓冲区溢出漏洞&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">sAMAccountName Spoofing之九个为什么</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1675/"/>
    <id>https://tttang.com/archive/1675/</id>
    <published>2022-07-22T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;在2021年11月份，Microsoft发布了两个域内提权漏洞CVE-2021-42287和CVE-2021-42278，但因为POC未公开，也没有引发关注，后来12月份这两个漏洞的利用方式被一一放出，引发了很多windows域安全研究者的关注，这两个漏洞可以进行组合攻击，在获取到域内普通用户权限的情况下模拟成域控机器账号，从而拿到域控权限。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Tomcat WebSocket内存马原理浅析</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1673/"/>
    <id>https://tttang.com/archive/1673/</id>
    <published>2022-07-21T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;周末和N1k0la师傅看到了这个repo：&lt;a href=&quot;https://github.com/veo/wsMemShell&quot; target=&quot;_blank&quot;&gt;wsMemShell&lt;/a&gt;，决定来研究一番。&lt;/p&gt;
&lt;p&gt;正好某大行动要开始了，希望此文能抛砖引玉，给师傅们带来一些启发。文章写的不好，疏漏之处细节欢迎师傅们指正。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">关于微信数据库的解密以及取证</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1665/"/>
    <id>https://tttang.com/archive/1665/</id>
    <published>2022-07-20T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;之前研究过一段时间的wx聊天记录解密，以及小程序解密，但是在晚上陆续搜了几篇文章后发现解密教程要么下载Visual Studio,不然就是对web安全人员不友好的od调试，而且根据系统的不同，解密方法也不同，于是作者用为数不多的编程知识写出了这篇教程- -在这里记录一下解密的原理以及一些方法分享给大家。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">Burrowing your way into VPNs, Proxies, and Tunnels（译文）</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1664/"/>
    <id>https://tttang.com/archive/1664/</id>
    <published>2022-07-19T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;从攻击者的角度考虑攻击生命周期时，他们几乎在每一步都有多种选择。防御者需要回答的一个问题是，对手是否会使用公开已知的恶意软件（即&lt;a href=&quot;https://advantage.mandiant.com/malware/malware--448e822d-8496-5021-88cb-599062f74176&quot; target=&quot;_blank&quot;&gt;BEACON&lt;/a&gt;)、自定义的恶意软件（即&lt;a href=&quot;https://advantage.mandiant.com/malware/malware--d7b72cf6-c413-59e1-9bb2-e06c861bded4&quot; target=&quot;_blank&quot;&gt;HAMMERTOSS&lt;/a&gt;）或提供完成所述步骤所需功能的&lt;a href=&quot;https://advantage.mandiant.com/reports/18-00013382&quot; target=&quot;_blank&quot;&gt;合法软件&lt;/a&gt;和服务（如&lt;a href=&quot;https://www.softether.org/&quot; target=&quot;_blank&quot;&gt;SoftEther虚拟专用网络&lt;/a&gt;）。&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">x64下隐藏可执行内存</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1589/"/>
    <id>https://tttang.com/archive/1589/</id>
    <published>2022-07-18T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;我们如果想要实现进程隐藏在3环通常会使用到PEB断链去达到隐藏进程的效果，但是那只是表面上的进程隐藏，所有内存的详细信息都会被储存在vad树里面，这里我们就来探究在64位下如何隐藏可执行内存&lt;/p&gt;
    </summary>
  </entry>
  <entry>
    <title type="text">CobaltStrike Malleable PE</title>
    <link rel="alternate" type="text/html" href="https://tttang.com/archive/1662/"/>
    <id>https://tttang.com/archive/1662/</id>
    <published>2022-07-15T12:00:00+08:00</published>
    <summary type="text">
      &lt;p&gt;Malleable PE 直译就是可拓展PE，通常来说，很多同学在做免杀的时候，会针对Loader进行免杀，并不会考虑针对beacon进行免杀，这就导致了很多杀软/EDR的内存防护能针对默认设置的beacon进行查杀。C2Profile提供了很好地操作beacon的方法，C2Profile不仅仅可以自定义beacon的通信属性(例如uri，header等等)，还可以对beacon进行操作，从而实现免杀的目的。&lt;/p&gt;
    </summary>
  </entry>

</feed>
